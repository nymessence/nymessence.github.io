{"version":3,"file":"hexgame2.js","sources":["../../js/hexgame.js"],"sourcesContent":["import * as THREE from '/node_modules/three/build/three.module.js';\nimport { OrbitControls } from '/node_modules/three/examples/jsm/controls/OrbitControls.js';\n\n// --- Canvas & Renderer ---\nconst canvas = document.getElementById('bgCanvas');\nif (!canvas) throw new Error(\"Canvas element with id 'bgCanvas' not found\");\n\nconst renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });\nrenderer.setSize(window.innerWidth, window.innerHeight);\nrenderer.setPixelRatio(window.devicePixelRatio);\nrenderer.setClearColor(0x000000, 0);\n\n// --- Scene & Camera ---\nconst scene = new THREE.Scene();\nconst camera = new THREE.PerspectiveCamera(60, window.innerWidth / window.innerHeight, 0.1, 1000);\ncamera.position.set(0, 8, 15);\n\n// --- Resize Handling ---\nwindow.addEventListener('resize', () => {\n    camera.aspect = window.innerWidth / window.innerHeight;\n    camera.updateProjectionMatrix();\n    renderer.setSize(window.innerWidth, window.innerHeight);\n});\n\n// --- Lights ---\nscene.add(new THREE.AmbientLight(0xffffff, 0.5));\nconst dirLight = new THREE.DirectionalLight(0xffffff, 0.8);\ndirLight.position.set(5, 10, 7.5);\nscene.add(dirLight);\n\n// --- OrbitControls (for debugging) ---\nconst controls = new OrbitControls(camera, renderer.domElement);\ncontrols.enablePan = false;\ncontrols.enableZoom = false;\ncontrols.target.set(0, 0, 0);\n\n// --- 24-Cell Cosmic Background ---\nlet cosmicGroup;\nconst vertices4D = [\n    [1, 1, 0, 0], [1, -1, 0, 0], [-1, 1, 0, 0], [-1, -1, 0, 0],\n    [1, 0, 1, 0], [1, 0, -1, 0], [-1, 0, 1, 0], [-1, 0, -1, 0],\n    [0, 1, 1, 0], [0, 1, -1, 0], [0, -1, 1, 0], [0, -1, -1, 0],\n    [1, 0, 0, 1], [1, 0, 0, -1], [-1, 0, 0, 1], [-1, 0, 0, -1],\n    [0, 1, 0, 1], [0, 1, 0, -1], [0, -1, 0, 1], [0, -1, 0, -1],\n    [0, 0, 1, 1], [0, 0, 1, -1], [0, 0, -1, 1], [0, 0, -1, -1]\n];\nconst edges = [];\nfunction distSquared(a, b) { return a.reduce((s, v, i) => s + (v - b[i]) ** 2, 0); }\nfor (let i = 0; i < vertices4D.length; i++)\n    for (let j = i + 1; j < vertices4D.length; j++)\n        if (Math.abs(distSquared(vertices4D[i], vertices4D[j]) - 2) < 0.01) edges.push([i, j]);\n\nfunction rotationMatrix4D(a, b, theta) {\n    const m = Array(4).fill(0).map(() => Array(4).fill(0));\n    for (let i = 0; i < 4; i++) m[i][i] = 1;\n    m[a][a] = Math.cos(theta); m[a][b] = -Math.sin(theta);\n    m[b][a] = Math.sin(theta); m[b][b] = Math.cos(theta);\n    return m;\n}\nfunction matVecMul(mat, vec) { return mat.map((row, i) => row.reduce((s, v, j) => s + v * vec[j], 0)); }\nfunction matMul(a, b) {\n    const res = Array(4).fill(0).map(() => Array(4).fill(0));\n    for (let i = 0; i < 4; i++) for (let j = 0; j < 4; j++) for (let k = 0; k < 4; k++)\n        res[i][j] += a[i][k] * b[k][j];\n    return res;\n}\nfunction composeRotations(rotations) { return rotations.reduce((m, r) => matMul(m, r)); }\nfunction project4Dto3D(v4, d = 6) {\n    const w = d - v4[3];\n    const safeW = w < 0.1 ? 0.1 : w;\n    return new THREE.Vector3(v4[0] * d / safeW, v4[1] * d / safeW, v4[2] * d / safeW);\n}\n\nconst rotationPlanes = [[0, 1], [0, 2], [0, 3], [1, 2], [1, 3], [2, 3]];\nlet angles = rotationPlanes.map(() => 0);\nlet angleSpeeds = rotationPlanes.map(() => (Math.random() * 0.001 + 0.0003) * (Math.random() < 0.5 ? 1 : -1));\n\nlet positions, geometry, wireframe;\nfunction initCosmicBG() {\n    cosmicGroup = new THREE.Group();\n    positions = new Float32Array(edges.length * 2 * 3);\n    geometry = new THREE.BufferGeometry();\n    geometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));\n    const mat = new THREE.LineBasicMaterial({ color: 0xffffff, transparent: true, opacity: 0.15 });\n    wireframe = new THREE.LineSegments(geometry, mat);\n    cosmicGroup.add(wireframe);\n    scene.add(cosmicGroup);\n}\nfunction updateCosmicBG() {\n    const rotations = rotationPlanes.map((p, i) => rotationMatrix4D(p[0], p[1], angles[i]));\n    const rotMatrix = composeRotations(rotations);\n    const pts3D = vertices4D.map(v => project4Dto3D(matVecMul(rotMatrix, v)));\n    edges.forEach((e, i) => {\n        const [a, b] = e, p1 = pts3D[a], p2 = pts3D[b];\n        positions[i * 6 + 0] = p1.x; positions[i * 6 + 1] = p1.y; positions[i * 6 + 2] = p1.z;\n        positions[i * 6 + 3] = p2.x; positions[i * 6 + 4] = p2.y; positions[i * 6 + 5] = p2.z;\n    });\n    geometry.attributes.position.needsUpdate = true;\n    angles = angles.map((ang, i) => {\n        let next = ang + angleSpeeds[i];\n        if (next > Math.PI * 2) next -= Math.PI * 2;\n        else if (next < 0) next += Math.PI * 2;\n        return next;\n    });\n}\ninitCosmicBG();\n\n// --------------------------------------------------------------------------------------------------\n// --- START: NEW GAME-SPECIFIC LOGIC ---\n// --------------------------------------------------------------------------------------------------\n\n// --- Game State and UI ---\nconst startBtn = document.getElementById('startBtn');\nconst resetBtn = document.getElementById('resetBtn');\nconst scoreDisplay = document.getElementById('score');\nconst highscoreDisplay = document.getElementById('highscore');\nconst livesDisplay = document.getElementById('lives');\n\nlet gameIsRunning = false;\nlet score = 0;\nlet highscore = localStorage.getItem('hexgameHighscore') || 0;\nlet lives = 3;\nlet playerPosition = { a: 0, b: 0 }; // Player's position on the Eisenstein grid\nlet playerMesh;\nconst cellSize = 20; // Radius of a hex cell\nlet gameGroup = new THREE.Group(); // Container for all game-related 3D objects\nscene.add(gameGroup);\n\nconst sqrt3 = Math.sqrt(3);\nconst hexBaseHeight = 0.5;\nlet worldPillars = new Map(); // Store pillar info for collision detection\nlet prizes = new Map(); // Store prize info: key is \"a,b\" string, value is prize type/object\n\n// Prize types\nconst PRIZE_CRYSTAL = \"crystal\";\nconst PRIZE_COIN = \"coin\";\nconst PRIZE_BAD = \"bad\";\n\n// Message Box\nconst messageBox = document.createElement('div');\nmessageBox.style.cssText = `\n    position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);\n    background-color: rgba(0, 0, 0, 0.7); color: white; padding: 20px;\n    border-radius: 10px; text-align: center; font-family: sans-serif;\n    display: none; z-index: 1000;\n`;\ndocument.body.appendChild(messageBox);\nfunction showMessage(text) {\n    messageBox.textContent = text;\n    messageBox.style.display = 'block';\n    setTimeout(() => {\n        messageBox.style.display = 'none';\n    }, 3000);\n}\n\nfunction updateUI() {\n    scoreDisplay.textContent = score;\n    highscoreDisplay.textContent = highscore;\n    livesDisplay.textContent = lives;\n}\n\n// Eisenstein lattice mapping from your other file\nfunction eisensteinToCanvas(a, b, size) {\n    const x = size * sqrt3 * (a + b / 2.0);\n    const y = size * (3.0 / 2.0 * b);\n    return [x, y];\n}\n\n// Utility functions for number theory\nfunction isPrime(n) {\n    if (n < 2) return false;\n    if (n === 2) return true;\n    if (n % 2 === 0) return false;\n    const lim = Math.floor(Math.sqrt(n));\n    for (let i = 3; i <= lim; i += 2) {\n        if (n % i === 0) return false;\n    }\n    return true;\n}\n\nfunction countFactors(n) {\n    if (n < 2) return 0;\n    let count = 0;\n    const lim = Math.floor(Math.sqrt(n));\n    for (let i = 2; i <= lim; i++) {\n        if (n % i === 0) {\n            count++;\n            if (i !== n / i) count++;\n        }\n    }\n    return count;\n}\n\nfunction isEisensteinPrime(a, b) {\n    if (a === 0 && b === 0) return false;\n    const norm = a * a - a * b + b * b;\n    if (norm <= 1) return false;\n    return isPrime(norm);\n}\n\n\n// --- Game Functions ---\nfunction startGame() {\n    if (gameIsRunning) return;\n    gameIsRunning = true;\n    console.log('Game started!');\n\n    score = 0;\n    lives = 3;\n    \n    // Clear any previous game objects\n    while (gameGroup.children.length > 0) {\n        gameGroup.remove(gameGroup.children[0]);\n    }\n    worldPillars.clear();\n    prizes.clear();\n\n    updateUI();\n    spawnPlayer();\n    generateWorld();\n    generateEisensteinPrimeSpiral(); // Updated function call\n}\n\nfunction resetGame() {\n    gameIsRunning = false;\n    console.log('Game reset!');\n\n    if (score > highscore) {\n        highscore = score;\n        localStorage.setItem('hexgameHighscore', highscore);\n    }\n    \n    score = 0;\n    lives = 3;\n    \n    while (gameGroup.children.length > 0) {\n        gameGroup.remove(gameGroup.children[0]);\n    }\n    \n    worldPillars.clear();\n    prizes.clear();\n    \n    updateUI();\n}\n\nfunction endGame() {\n    gameIsRunning = false;\n    // Update high score on game over\n    if (score > highscore) {\n        highscore = score;\n        localStorage.setItem('hexgameHighscore', highscore);\n    }\n    updateUI();\n    showMessage(`Game Over!\\nFinal Score: ${score}\\nHigh Score: ${highscore}`);\n}\n\nfunction spawnPlayer() {\n    // Player is a 3D projection of a 24-cell\n    if (playerMesh) {\n        gameGroup.remove(playerMesh);\n    }\n\n    const playerScale = 0.5;\n    playerMesh = cosmicGroup.clone();\n    playerMesh.scale.set(playerScale, playerScale, playerScale);\n    \n    // Randomly spawn within a 128-hex radius\n    const a = Math.floor(Math.random() * 256) - 128;\n    const b = Math.floor(Math.random() * 256) - 128;\n    playerPosition = { a, b };\n    \n    const [x, y] = eisensteinToCanvas(a, b, cellSize);\n    playerMesh.position.set(x, y, 0); // Position at the base of the pillar\n    gameGroup.add(playerMesh);\n}\n\nfunction spawnPrizes(a, b, height) {\n    if (Math.random() < 0.01) { // 1% chance to spawn a prize\n        const prizeType = Math.random() < 0.1 ? PRIZE_BAD : Math.random() < 0.5 ? PRIZE_CRYSTAL : PRIZE_COIN;\n        \n        let prizeMesh;\n        const [x, y] = eisensteinToCanvas(a, b, cellSize);\n\n        if (prizeType === PRIZE_CRYSTAL) {\n            const geometry = new THREE.OctahedronGeometry(2);\n            const material = new THREE.MeshStandardMaterial({ color: 0x00ffff, emissive: 0x00ffff, emissiveIntensity: 0.5 });\n            prizeMesh = new THREE.Mesh(geometry, material);\n        } else if (prizeType === PRIZE_COIN) {\n            const geometry = new THREE.CylinderGeometry(2, 2, 0.5, 32);\n            const material = new THREE.MeshStandardMaterial({ color: 0xffff00, emissive: 0xffff00, emissiveIntensity: 0.5 });\n            prizeMesh = new THREE.Mesh(geometry, material);\n        } else if (prizeType === PRIZE_BAD) {\n            const geometry = new THREE.TorusGeometry(2, 0.5, 16, 100);\n            const material = new THREE.MeshStandardMaterial({ color: 0xff0000, emissive: 0xff0000, emissiveIntensity: 0.5 });\n            prizeMesh = new THREE.Mesh(geometry, material);\n        }\n\n        prizeMesh.position.set(x, y, height + 5);\n        gameGroup.add(prizeMesh);\n        prizes.set(`${a},${b}`, { type: prizeType, object: prizeMesh });\n    }\n}\n\nfunction generateWorld() {\n    const spawnRadius = 128;\n    \n    // Iterate over the grid to create pillars\n    for (let a = -spawnRadius; a <= spawnRadius; a++) {\n        for (let b = -spawnRadius; b <= spawnRadius; b++) {\n            const norm = a * a - a * b + b * b;\n            let height = hexBaseHeight;\n            let color = 0x555555;\n            let isPrimePillar = false;\n\n            if (isEisensteinPrime(a, b)) {\n                height = hexBaseHeight * 3; // Prime pillar is 3x higher\n                color = 0x00ff00; // Green for prime\n                isPrimePillar = true;\n            } else if (norm > 1) {\n                const factorCount = countFactors(norm);\n                // Adjust height based on number of factors\n                height = hexBaseHeight / (factorCount + 1); \n                color = 0xaaaaaa;\n            }\n            \n            // Store pillar data\n            worldPillars.set(`${a},${b}`, { height, isPrime: isPrimePillar });\n\n            // Skip the origin pillar for now, or make it special\n            if (a === 0 && b === 0) continue;\n\n            const [x, y] = eisensteinToCanvas(a, b, cellSize);\n            const geometry = new THREE.CylinderGeometry(cellSize * 0.9, cellSize * 0.9, height, 6);\n            const material = new THREE.MeshStandardMaterial({ color });\n            const pillar = new THREE.Mesh(geometry, material);\n            pillar.position.set(x, y, height / 2); // Position based on pillar height\n            gameGroup.add(pillar);\n            \n            spawnPrizes(a, b, height);\n        }\n    }\n}\n\n// --- NEW Hexagonal Ulam Spiral Visualization ---\nfunction generateEisensteinPrimeSpiral() {\n    const spiralGroup = new THREE.Group();\n    const spiralRadius = 150;\n    const spiralSize = 1; // Size of each prime number cube\n    const spiralHeight = 10;\n    const geometry = new THREE.BoxGeometry(spiralSize, spiralSize, spiralSize);\n    const material = new THREE.MeshStandardMaterial({ color: 0xffffff, emissive: 0xff00ff, emissiveIntensity: 0.8 });\n\n    let a = 0, b = 0; // Coordinates on the Eisenstein grid\n    let step = 1;\n    let turnCount = 0;\n    let direction = 0; // 0=E, 1=NE, 2=NW, 3=W, 4=SW, 5=SE\n\n    for (let i = 1; i <= spiralRadius * spiralRadius; i++) {\n        if (isEisensteinPrime(a, b)) {\n            const primeCube = new THREE.Mesh(geometry, material);\n            const [x, y] = eisensteinToCanvas(a, b, spiralSize * 2); // Use a smaller 'cellSize' for the spiral\n            primeCube.position.set(x, y, spiralHeight);\n            spiralGroup.add(primeCube);\n        }\n\n        // Move one step in the current direction\n        switch(direction) {\n            case 0: a++; break;\n            case 1: a++; b--; break;\n            case 2: b--; break;\n            case 3: a--; break;\n            case 4: a--; b++; break;\n            case 5: b++; break;\n        }\n\n        // Check for a turn\n        if (i === step || i === step + 1) {\n            turnCount++;\n            direction = (direction + 1) % 6;\n            if (turnCount % 2 === 0) {\n                step += 1;\n            }\n        }\n    }\n    \n    // Position the Eisenstein spiral above the hexagonal game board\n    spiralGroup.position.set(0, 0, 50);\n    gameGroup.add(spiralGroup);\n}\n\nfunction checkCollisions(newA, newB) {\n    const prevPillar = worldPillars.get(`${playerPosition.a},${playerPosition.b}`);\n    const newPillar = worldPillars.get(`${newA},${newB}`);\n    \n    if (!newPillar) {\n        lives--;\n        console.log(\"Fell off the world! Lives remaining:\", lives);\n        if (lives <= 0) {\n            endGame();\n        }\n        return false;\n    }\n\n    if (prevPillar && prevPillar.isPrime && newPillar && !newPillar.isPrime) {\n        lives--;\n        console.log(\"Fell from a prime pillar! Lives remaining:\", lives);\n        if (lives <= 0) {\n            endGame();\n        }\n    }\n    \n    const prizeKey = `${newA},${newB}`;\n    if (prizes.has(prizeKey)) {\n        const prize = prizes.get(prizeKey);\n        if (prize.type === PRIZE_CRYSTAL) {\n            // TODO: Handle 3x jump crystal logic\n            score += 100;\n            console.log(\"Collected a crystal!\");\n        } else if (prize.type === PRIZE_COIN) {\n            score += 10;\n            console.log(\"Collected a coin!\");\n        } else if (prize.type === PRIZE_BAD) {\n            lives--;\n            console.log(\"Collected a bad item! Lives remaining:\", lives);\n            if (lives <= 0) {\n                endGame();\n            }\n        }\n        \n        gameGroup.remove(prize.object);\n        prizes.delete(prizeKey);\n    }\n    \n    updateUI();\n    return true;\n}\n\nfunction movePlayer(direction) {\n    if (!gameIsRunning) return;\n\n    let { a, b } = playerPosition;\n    \n    const newPos = { a, b };\n    switch(direction) {\n        case 0: newPos.a++; break;\n        case 1: newPos.a++; newPos.b--; break;\n        case 2: newPos.b--; break;\n        case 3: newPos.a--; break;\n        case 4: newPos.a--; newPos.b++; break;\n        case 5: newPos.b++; break;\n    }\n    \n    if (checkCollisions(newPos.a, newPos.b)) {\n        playerPosition = newPos;\n        const [x, y] = eisensteinToCanvas(newPos.a, newPos.b, cellSize);\n        \n        playerMesh.position.x = x;\n        playerMesh.position.y = y;\n    }\n}\n\n// --- Keyboard Controls ---\nwindow.addEventListener('keydown', (e) => {\n    if (!gameIsRunning) return;\n    switch(e.key.toLowerCase()) {\n        case 'd': movePlayer(0); break; // East\n        case 'q': movePlayer(2); break; // Northwest\n        case 'z': movePlayer(4); break; // Southwest\n        case 'a': movePlayer(3); break; // West\n        case 'e': movePlayer(1); break; // Northeast\n        case 'x': movePlayer(5); break; // Southeast\n    }\n});\n\n// --- Touch Controls ---\nlet touchStartX, touchStartY;\nconst minSwipeDistance = 50;\nwindow.addEventListener(\"touchstart\", (e) => {\n    touchStartX = e.touches[0].clientX;\n    touchStartY = e.touches[0].clientY;\n});\nwindow.addEventListener(\"touchend\", (e) => {\n    if (!gameIsRunning) return;\n    if (!touchStartX || !touchStartY) return;\n\n    const endX = e.changedTouches[0].clientX;\n    const endY = e.changedTouches[0].clientY;\n    const dx = endX - touchStartX;\n    const dy = endY - touchStartY;\n    \n    if (Math.abs(dx) > minSwipeDistance || Math.abs(dy) > minSwipeDistance) {\n        const angle = Math.atan2(dy, dx);\n        if (angle > -Math.PI / 6 && angle <= Math.PI / 6) movePlayer(0); // East\n        else if (angle > Math.PI / 6 && angle <= Math.PI / 2) movePlayer(5); // Southeast\n        else if (angle > Math.PI / 2 && angle <= 5 * Math.PI / 6) movePlayer(4); // Southwest\n        else if (angle > 5 * Math.PI / 6 || angle <= -5 * Math.PI / 6) movePlayer(3); // West\n        else if (angle > -5 * Math.PI / 6 && angle <= -Math.PI / 2) movePlayer(2); // Northwest\n        else if (angle > -Math.PI / 2 && angle <= -Math.PI / 6) movePlayer(1); // Northeast\n    }\n    \n    touchStartX = null;\n    touchStartY = null;\n});\n\n// --------------------------------------------------------------------------------------------------\n// --- END: NEW GAME-SPECIFIC LOGIC ---\n// --------------------------------------------------------------------------------------------------\n\n// --- Event Listeners ---\nstartBtn.addEventListener('click', startGame);\nresetBtn.addEventListener('click', resetGame);\n\n// --- Initial Setup ---\nupdateUI();\n\n// --- Camera Following Logic ---\nfunction updateCamera() {\n    if (!playerMesh) return;\n\n    // Define a target position for the camera\n    const cameraTarget = new THREE.Vector3(playerMesh.position.x, playerMesh.position.y - 15, playerMesh.position.z + 15);\n    \n    // Smoothly move the camera to the target position\n    camera.position.lerp(cameraTarget, 0.05);\n\n    // Make the camera look at the player\n    controls.target.copy(playerMesh.position);\n    controls.update();\n}\n\n// --- Animation Loop ---\nfunction animate() {\n    requestAnimationFrame(animate);\n\n    updateCosmicBG();\n    \n    if (gameIsRunning) {\n        if (playerMesh) {\n            playerMesh.rotation.z += 0.01;\n            updateCamera(); // Call the new camera function\n        }\n    }\n    \n    renderer.render(scene, camera);\n}\nanimate();\n\n"],"names":["canvas","renderer","THREE.WebGLRenderer","scene","THREE.Scene","camera","THREE.PerspectiveCamera","THREE.AmbientLight","dirLight","THREE.DirectionalLight","controls","OrbitControls","cosmicGroup","vertices4D","edges","distSquared","a","b","s","v","i","j","rotationMatrix4D","theta","m","matVecMul","mat","vec","row","matMul","res","k","composeRotations","rotations","r","project4Dto3D","v4","d","w","safeW","THREE.Vector3","rotationPlanes","angles","angleSpeeds","positions","geometry","wireframe","initCosmicBG","THREE.Group","THREE.BufferGeometry","THREE.BufferAttribute","THREE.LineBasicMaterial","THREE.LineSegments","updateCosmicBG","p","rotMatrix","pts3D","e","p1","p2","ang","next","startBtn","resetBtn","scoreDisplay","highscoreDisplay","livesDisplay","gameIsRunning","score","highscore","lives","playerPosition","playerMesh","cellSize","gameGroup","sqrt3","hexBaseHeight","worldPillars","prizes","PRIZE_CRYSTAL","PRIZE_COIN","PRIZE_BAD","messageBox","showMessage","text","updateUI","eisensteinToCanvas","size","x","y","isPrime","n","lim","countFactors","count","isEisensteinPrime","norm","startGame","spawnPlayer","generateWorld","generateEisensteinPrimeSpiral","resetGame","endGame","playerScale","spawnPrizes","height","prizeType","prizeMesh","THREE.OctahedronGeometry","material","THREE.MeshStandardMaterial","THREE.Mesh","THREE.CylinderGeometry","THREE.TorusGeometry","color","isPrimePillar","factorCount","pillar","spiralGroup","spiralRadius","spiralSize","spiralHeight","THREE.BoxGeometry","step","turnCount","direction","primeCube","checkCollisions","newA","newB","prevPillar","newPillar","prizeKey","prize","movePlayer","newPos","touchStartX","touchStartY","minSwipeDistance","endX","endY","dx","dy","angle","updateCamera","cameraTarget","animate"],"mappings":"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"}