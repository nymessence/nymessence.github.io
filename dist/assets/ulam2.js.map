{"version":3,"file":"ulam2.js","sources":["../../js/ulam.js"],"sourcesContent":["const canvas = document.getElementById(\"ulamCanvas\");\nconst ctx = canvas.getContext(\"2d\");\nconst modeSelect = document.getElementById(\"modeSelect\");\n\nlet width = 0, height = 0;\n// cellSize now represents the radius of the hexagon (center to vertex)\nlet cellSize = 20;\nlet scale = 1;\nlet translateX = 0;\nlet translateY = 0;\n// New variable for device pixel ratio\nconst pixelRatio = window.devicePixelRatio || 1;\n\n// New variables for inertia\nlet velocityX = 0;\nlet velocityY = 0;\nconst friction = 0.92; // Adjust this value for more or less \"slide\"\nlet isDragging = false;\nlet dragStartX = 0;\nlet dragStartY = 0;\nlet dragTranslateX = 0;\nlet dragTranslateY = 0;\n\n// New variables for pinch-to-zoom\nlet initialDistance = -1;\nlet initialScale = 1;\n\n// visibleCells: Map \"x,y\" -> { x, y, label, value, color }\nconst visibleCells = new Map();\n\n// tooltip\nconst tooltip = document.createElement(\"div\");\ntooltip.style.position = \"fixed\";\ntooltip.style.background = \"rgba(0,0,0,0.85)\";\ntooltip.style.color = \"#0f0\";\ntooltip.style.padding = \"6px 10px\";\ntooltip.style.borderRadius = \"5px\";\ntooltip.style.fontFamily = \"monospace\";\ntooltip.style.fontSize = \"13px\";\ntooltip.style.pointerEvents = \"none\";\ntooltip.style.whiteSpace = \"pre\";\ntooltip.style.display = \"none\";\ntooltip.style.zIndex = 10000;\ndocument.body.appendChild(tooltip);\n\n// ------- Utilities -------\nconst primeCache = new Map();\nfunction isPrime(n) {\n    if (n < 2) return false;\n    if (primeCache.has(n)) return primeCache.get(n);\n    if (n === 2) { primeCache.set(n, true); return true; }\n    if (n % 2 === 0) { primeCache.set(n, false); return false; }\n    const lim = Math.floor(Math.sqrt(n));\n    for (let i = 3; i <= lim; i += 2) {\n        if (n % i === 0) { primeCache.set(n, false); return false; }\n    }\n    primeCache.set(n, true);\n    return true;\n}\n\nfunction countFactors(n) {\n    if (n < 2) return 0;\n    let count = 0;\n    const lim = Math.floor(Math.sqrt(n));\n    for (let i = 2; i <= lim; i++) {\n        if (n % i === 0) {\n            count++;\n            if (i !== n / i) count++;\n        }\n    }\n    return count;\n}\n\nfunction primeFactorization(n) {\n    const out = new Map();\n    let num = n;\n    for (let p = 2; p * p <= num; p++) {\n        while (num % p === 0) {\n            out.set(p, (out.get(p) || 0) + 1);\n            num = Math.floor(num / p);\n        }\n    }\n    if (num > 1) out.set(num, (out.get(num) || 0) + 1);\n    return out;\n}\n\nfunction formatFactorization(map) {\n    if (!map || map.size === 0) return \"(none)\";\n    const parts = [];\n    for (const [p, e] of map.entries()) parts.push(e > 1 ? `${p}^${e}` : `${p}`);\n    return parts.join(\" Ã— \");\n}\n\n// --- Goldbach Comet related functions ---\nfunction countGoldbachPairs(n) {\n    if (n <= 2 || n % 2 !== 0) return 0;\n    let count = 0;\n    for (let i = 2; i <= n / 2; i++) {\n        if (isPrime(i) && isPrime(n - i)) {\n            count++;\n        }\n    }\n    return count;\n}\n\nconst C2 = 0.6601618158; // Twin prime constant\n\nfunction hardyLittlewoodApproximation(n) {\n    if (n <= 2 || n % 2 !== 0) return 1;\n    const ln_n = Math.log(n);\n    if (ln_n === 0) return 1;\n    let productCorrection = 1.0;\n    const factors = primeFactorization(n);\n    for (const [p] of factors.entries()) {\n        if (p > 2) { // p is an odd prime factor\n            productCorrection *= (p - 1) / (p - 2);\n        }\n    }\n    const approximation = 2 * C2 * (n / (ln_n * ln_n)) * productCorrection;\n    return approximation;\n}\n\n\n// ------- Coordinate mappings -------\nfunction ulamNumberAt(x, y) {\n    if (x === 0 && y === 0) return 1;\n    const layer = Math.max(Math.abs(x), Math.abs(y));\n    const legLen = 2 * layer;\n    const maxVal = (2 * layer + 1) ** 2;\n    let n;\n    if (y === layer) {\n        n = maxVal - (layer - x);\n    } else if (x === -layer) {\n        n = maxVal - legLen - (layer - y);\n    } else if (y === -layer) {\n        n = maxVal - 2 * legLen - (x + layer);\n    } else {\n        n = maxVal - 3 * legLen - (y + layer);\n    }\n    return n;\n}\n\nfunction isGaussianPrime(a, b) {\n    const A = Math.abs(a), B = Math.abs(b);\n    if (A === 0 && B === 0) return false;\n    if (A === 0) return isPrime(B) && (B % 4 === 3);\n    if (B === 0) return isPrime(A) && (A % 4 === 3);\n    return isPrime(A * A + B * B);\n}\n\nfunction isEisensteinPrime(a, b) {\n    if (a === 0 && b === 0) return false;\n    const norm = a * a - a * b + b * b;\n    if (norm <= 1) return false;\n    return isPrime(norm);\n}\n\n// ------- Eisenstein lattice mapping for correct tessellation -------\nconst sqrt3 = Math.sqrt(3);\n\nfunction eisensteinToCanvas(a, b, size) {\n    const x = size * sqrt3 * (a + b / 2.0);\n    const y = size * (3.0 / 2.0 * b);\n    return [x, y];\n}\n\nfunction canvasToEisenstein(x, y, size) {\n    const b_frac = (2.0 / 3.0 * y) / size;\n    const a_frac = (x / (size * sqrt3)) - (b_frac / 2.0);\n    const cx_frac = a_frac;\n    const cz_frac = b_frac;\n    const cy_frac = -cx_frac - cz_frac;\n    let cx_round = Math.round(cx_frac);\n    let cy_round = Math.round(cy_frac);\n    let cz_round = Math.round(cz_frac);\n    const cx_diff = Math.abs(cx_round - cx_frac);\n    const cy_diff = Math.abs(cy_round - cy_frac);\n    const cz_diff = Math.abs(cz_round - cz_frac);\n    if (cx_diff > cy_diff && cx_diff > cz_diff) {\n        cx_round = -cy_round - cz_round;\n    } else if (cy_diff > cz_diff) {\n        cy_round = -cx_round - cz_round;\n    } else {\n        cz_round = -cx_round - cy_round;\n    }\n    return [cx_round, cz_round];\n}\n\n\nfunction drawHex(ctx, x, y, size, fillStyle, strokeStyle, lineWidth) {\n    ctx.beginPath();\n    for (let i = 0; i < 6; i++) {\n        const angle = Math.PI / 6 + i * Math.PI / 3;\n        const dx = size * Math.cos(angle);\n        const dy = size * Math.sin(angle);\n        if (i === 0) ctx.moveTo(x + dx, y + dy);\n        else ctx.lineTo(x + dx, y + dy);\n    }\n    ctx.closePath();\n    if (fillStyle) {\n        ctx.fillStyle = fillStyle;\n        ctx.fill();\n    }\n    if (strokeStyle) {\n        ctx.strokeStyle = strokeStyle;\n        ctx.lineWidth = lineWidth;\n        ctx.stroke();\n    }\n}\n\n// ------- color picking -------\nfunction pickColorForCell(x, y) {\n    const mode = modeSelect.value;\n    const lowerCaseMode = mode.toLowerCase();\n\n    if (lowerCaseMode.includes(\"-comet\")) {\n        let n;\n        if (lowerCaseMode.startsWith(\"ulam-\")) {\n            n = ulamNumberAt(x, y);\n        } else if (lowerCaseMode.startsWith(\"gauss-\")) {\n            n = x * x + y * y;\n        } else { // eisen\n            n = x * x - x * y + y * y;\n        }\n\n        if (n <= 2 || n % 2 !== 0) {\n            return \"rgba(20, 20, 20, 1)\"; // Dark gray for odd/small numbers\n        }\n\n        const actualPairs = countGoldbachPairs(n);\n        \n        // --- MODIFIED --- New normalization curve\n        const normalizationFactor = Math.log(n);\n        const ratio = actualPairs / (n / (normalizationFactor**2) );\n        const hue = 240 - (ratio * 120);\n        const clampedHue = Math.max(0, Math.min(240, hue));\n        \n        return `hsl(${clampedHue}, 90%, 55%)`;\n    }\n\n\n    if (lowerCaseMode.includes(\"ulam-\")) {\n        const n = ulamNumberAt(x, y);\n        if (lowerCaseMode === \"ulam-green\") return isPrime(n) ? \"#00ff00\" : \"transparent\";\n        if (n === 1) return \"black\";\n        if (isPrime(n)) return \"#ffffff\";\n        const f = countFactors(n);\n        let brightness = Math.max(0, 255 - f * 12);\n        brightness = Math.min(255, brightness);\n        return `rgb(${brightness},${Math.floor(brightness/2)},0)`;\n    } else if (lowerCaseMode.includes(\"gauss-\")) {\n        const a = x, b = y;\n        const norm = a * a + b * b;\n        if (lowerCaseMode === \"gauss-green\") {\n            return isGaussianPrime(a, b) ? \"#00ff00\" : \"transparent\";\n        } else {\n            if (isGaussianPrime(a, b)) return \"#ffffff\";\n            if (norm <= 1) return \"black\";\n            const f = countFactors(norm);\n            let brightness = Math.max(0, 255 - f * 12);\n            brightness = Math.min(255, brightness);\n            return `rgb(${brightness},${Math.floor(brightness/2)},0)`;\n        }\n    } else if (lowerCaseMode.includes(\"eisen\")) {\n        const a = x, b = y;\n        const norm = a * a - a * b + b * b;\n        if (lowerCaseMode.includes(\"eisen-green\")) {\n            return isEisensteinPrime(a, b) ? \"#00ff00\" : \"transparent\";\n        } else {\n            if (isEisensteinPrime(a, b)) return \"#ffffff\";\n            if (norm <= 1) return \"black\";\n            const f = countFactors(norm);\n            let brightness = Math.max(0, 255 - f * 12);\n            brightness = Math.min(255, brightness);\n            return `rgb(${brightness},${Math.floor(brightness/2)},0)`;\n        }\n    }\n    return \"transparent\";\n}\n\n\n// ------- Viewport & caching -------\nconst marginCells = 5;\nconst MIN_SCALE = 0.05;\nconst MAX_SCALE = 12;\n\nfunction updateVisibleCells() {\n    visibleCells.clear();\n    const mode = modeSelect.value;\n    \n    const isEisensteinMode = mode.toLowerCase().includes(\"eisen\");\n\n    const viewLeft = (-translateX) / scale;\n    const viewRight = (width - translateX) / scale;\n    const viewTop = (-translateY) / scale;\n    const viewBottom = (height - translateY) / scale;\n\n    if (isEisensteinMode) {\n        const hexRadius = cellSize;\n        const hexWidth = hexRadius * sqrt3;\n        const hexHeight = hexRadius * 2;\n        \n        const [a1, b1] = canvasToEisenstein(viewLeft, viewTop, hexRadius);\n        const [a2, b2] = canvasToEisenstein(viewRight, viewTop, hexRadius);\n        const [a3, b3] = canvasToEisenstein(viewLeft, viewBottom, hexRadius);\n        const [a4, b4] = canvasToEisenstein(viewRight, viewBottom, hexRadius);\n        \n        const aMin = Math.min(a1, a2, a3, a4) - marginCells;\n        const aMax = Math.max(a1, a2, a3, a4) + marginCells;\n        const bMin = Math.min(b1, b2, b3, b4) - marginCells;\n        const bMax = Math.max(b1, b2, b3, b4) + marginCells;\n\n        for (let b = Math.floor(bMin); b <= Math.ceil(bMax); b++) {\n            for (let a = Math.floor(aMin); a <= Math.ceil(aMax); a++) {\n                const [cellX, cellY] = eisensteinToCanvas(a, b, hexRadius);\n                \n                if (cellX > viewLeft - hexWidth && cellX < viewRight + hexWidth && \n                    cellY > viewTop - hexHeight && cellY < viewBottom + hexHeight) {\n                    const key = `${a},${b}`;\n                    let label, value, color;\n\n                    value = a * a - a * b + b * b;\n                    label = `${a}${b >= 0 ? \"+\" : \"\"}${b}Ï‰`;\n                    color = pickColorForCell(a, b);\n                    visibleCells.set(key, { x: a, y: b, label, value: value, color });\n                }\n            }\n        }\n    } else { // Square grid for Ulam and Gaussian\n        const cellW = cellSize;\n        const cellH = cellW;\n        const left = Math.floor(viewLeft / cellW) - marginCells;\n        const right = Math.ceil(viewRight / cellW) + marginCells;\n        const top = Math.floor(viewTop / cellH) - marginCells;\n        const bottom = Math.ceil(viewBottom / cellH) + marginCells;\n\n        for (let gy = top; gy <= bottom; gy++) {\n            for (let gx = left; gx <= right; gx++) {\n                const key = `${gx},${gy}`;\n                let label, value, color;\n\n                if (mode.toLowerCase().includes(\"ulam-\")) {\n                    value = ulamNumberAt(gx, gy);\n                    label = String(value);\n                } else { // Gaussian\n                    value = gx * gx + gy * gy;\n                    label = `${gx}${gy >= 0 ? \"+\" : \"\"}${gy}i`;\n                }\n                color = pickColorForCell(gx, gy);\n                visibleCells.set(key, { x: gx, y: gy, label, value: value, color });\n            }\n        }\n    }\n}\n\n// ------- Drawing -------\nfunction draw() {\n    ctx.clearRect(0, 0, width * pixelRatio, height * pixelRatio);\n    ctx.save();\n    // The pixel ratio is already applied to the context in `resize()`\n    ctx.translate(translateX, translateY);\n    ctx.scale(scale, scale);\n\n    const mode = modeSelect.value;\n    const lowerCaseMode = mode.toLowerCase();\n\n    // Draw axes\n    if (lowerCaseMode.includes(\"gauss-\")) {\n        ctx.strokeStyle = \"#666\";\n        ctx.lineWidth = 1 / scale;\n        ctx.beginPath();\n        ctx.moveTo(-width/scale, 0); ctx.lineTo(width/scale, 0); // Real axis\n        ctx.moveTo(0, -height/scale); ctx.lineTo(0, height/scale); // Imag axis\n        ctx.stroke();\n    } else if (lowerCaseMode.includes(\"eisen\")) {\n        ctx.strokeStyle = \"#666\";\n        ctx.lineWidth = 1 / scale;\n        ctx.beginPath();\n        \n        const axisLen = Math.max(width, height) / scale;\n        const [e1x, e1y] = eisensteinToCanvas(axisLen, 0, 1);\n        ctx.moveTo(-e1x, -e1y); ctx.lineTo(e1x, e1y);\n        \n        const [e2x, e2y] = eisensteinToCanvas(0, axisLen, 1);\n        ctx.moveTo(-e2x, -e2y); ctx.lineTo(e2x, e2y);\n        ctx.stroke();\n    }\n\n    // Main drawing loop\n    if (lowerCaseMode.includes(\"eisen\")) {\n        const size = cellSize;\n        \n        for (const cell of visibleCells.values()) {\n            const [x, y] = eisensteinToCanvas(cell.x, cell.y, size);\n            \n            if (cell.color !== \"transparent\") {\n                drawHex(ctx, x, y, size, cell.color, null, null);\n            }\n\n            drawHex(ctx, x, y, size, null, \"rgba(0,0,0,0.2)\", 1 / scale);\n        }\n\n    } else { // Square grid\n        const size = cellSize;\n        for (const cell of visibleCells.values()) {\n            if (cell.color === \"transparent\") continue;\n            ctx.fillStyle = cell.color;\n            ctx.fillRect(cell.x * size, cell.y * size, size, size);\n            ctx.strokeStyle = \"rgba(0,0,0,0.2)\";\n            ctx.lineWidth = 1 / scale;\n            ctx.strokeRect(cell.x * size, cell.y * size, size, size);\n        }\n    }\n    ctx.restore();\n}\n\n// ------- Animation Loop for Inertia -------\nfunction animate() {\n    // If not dragging, apply inertia\n    if (!isDragging) {\n        if (Math.abs(velocityX) > 0.1 || Math.abs(velocityY) > 0.1) {\n            translateX += velocityX;\n            translateY += velocityY;\n            velocityX *= friction;\n            velocityY *= friction;\n            updateVisibleCells();\n            draw();\n        } else if (Math.abs(velocityX) <= 0.1 && Math.abs(velocityY) <= 0.1 && (velocityX !== 0 || velocityY !== 0)) {\n            // Stop motion when it's negligible\n            velocityX = 0;\n            velocityY = 0;\n        }\n    }\n    requestAnimationFrame(animate);\n}\n\n// ------- Mouse / tooltip helpers -------\nfunction getCellUnderMouse(mouseX, mouseY) {\n    const mode = modeSelect.value;\n    // Mouse coordinates must be divided by the pixel ratio\n    const xCanvas = (mouseX / pixelRatio - translateX) / scale;\n    const yCanvas = (mouseY / pixelRatio - translateY) / scale;\n    const isEisensteinMode = mode.toLowerCase().includes(\"eisen\");\n\n    if (isEisensteinMode) {\n        const [a, b] = canvasToEisenstein(xCanvas, yCanvas, cellSize);\n        const key = `${a},${b}`;\n        return visibleCells.get(key);\n    } else {\n        const gx = Math.floor(xCanvas / cellSize);\n        const gy = Math.floor(yCanvas / cellSize);\n        return visibleCells.get(`${gx},${gy}`);\n    }\n}\n\nfunction onMouseMove(e) {\n    if (isDragging) {\n        tooltip.style.display = \"none\";\n        const dx = e.clientX - dragStartX;\n        const dy = e.clientY - dragStartY;\n        translateX = dragTranslateX + dx * pixelRatio;\n        translateY = dragTranslateY + dy * pixelRatio;\n        // Update velocity for inertia effect\n        velocityX = e.movementX * pixelRatio;\n        velocityY = e.movementY * pixelRatio;\n        updateVisibleCells();\n        draw();\n        return;\n    }\n\n    const cell = getCellUnderMouse(e.clientX * pixelRatio, e.clientY * pixelRatio);\n    if (!cell) {\n        tooltip.style.display = \"none\";\n        return;\n    }\n\n    const mode = modeSelect.value;\n    let tooltipText = \"\";\n    \n    // --- MODIFIED --- New tooltip logic for comet mode\n    if (mode.toLowerCase().includes(\"-comet\")) {\n        const n = cell.value;\n        let coordLabel = `n = ${n}`; // Default for Ulam\n        if (mode.startsWith(\"gauss-\")) {\n            coordLabel = `${cell.x}${cell.y >= 0 ? \"+\" : \"\"}${cell.y}i\\nNorm = ${n}`;\n        } else if (mode.startsWith(\"eisen-\")) {\n            coordLabel = `${cell.x}${cell.y >= 0 ? \"+\" : \"\"}${cell.y}Ï‰\\nNorm = ${n}`;\n        }\n\n        if (n <= 2 || n % 2 !== 0) {\n            tooltipText = `${coordLabel}\\n(Odd or too small)`;\n        } else {\n            const actual = countGoldbachPairs(n);\n            const expected = hardyLittlewoodApproximation(n);\n            const ratio = expected > 0.1 ? actual / expected : 0;\n            tooltipText = `${coordLabel}\\nGoldbach Pairs: ${actual}\\nHeuristic: ${expected.toFixed(2)}\\nRatio: ${ratio.toFixed(2)}`;\n        }\n    } else if (mode.toLowerCase().includes(\"ulam-\")) {\n        const n = cell.value;\n        const fc = countFactors(n);\n        const pf = formatFactorization(primeFactorization(n));\n        tooltipText = `n = ${n}\\nFactors (excluding 1,n): ${fc}\\nPrime factorization:\\n${pf}`;\n    } else if (mode.toLowerCase().includes(\"gauss-\")) {\n        const a = cell.x, b = cell.y;\n        const norm = cell.value;\n        const gp = isGaussianPrime(a, b) ? \"Yes\" : \"No\";\n        const fc = countFactors(norm);\n        const pf = formatFactorization(primeFactorization(norm));\n        tooltipText = `${a}${b >= 0 ? \"+\" : \"\"}${b}i\\nGaussian prime: ${gp}\\nNorm = ${norm}\\nNorm factors (excl 1,norm): ${fc}\\nPrime factorization of norm:\\n${pf}`;\n    } else if (mode.toLowerCase().includes(\"eisen\")) {\n        const a = cell.x, b = cell.y;\n        const norm = cell.value;\n        const ep = isEisensteinPrime(a, b) ? \"Yes\" : \"No\";\n        const fc = countFactors(norm);\n        const pf = formatFactorization(primeFactorization(norm));\n        tooltipText = `${a}${b >= 0 ? \"+\" : \"\"}${b}Ï‰\\nEisenstein prime: ${ep}\\nNorm = ${norm}\\nNorm factors (excl 1,norm): ${fc}\\nPrime factorization of norm:\\n${pf}`;\n    }\n\n    tooltip.textContent = tooltipText;\n    tooltip.style.display = \"block\";\n    const padding = 12;\n    let left = e.clientX + padding;\n    let top = e.clientY + padding;\n    if (left + tooltip.offsetWidth > window.innerWidth) left = e.clientX - tooltip.offsetWidth - padding;\n    if (top + tooltip.offsetHeight > window.innerHeight) top = e.clientY - tooltip.offsetHeight - padding;\n    tooltip.style.left = `${left}px`;\n    tooltip.style.top = `${top}px`;\n}\n\n// ------- Interaction handlers -------\nfunction onWheel(e) {\n    e.preventDefault();\n    const mx = e.clientX * pixelRatio;\n    const my = e.clientY * pixelRatio;\n    const delta = -e.deltaY * 0.001;\n    let newScale = scale * (1 + delta);\n    newScale = Math.min(Math.max(newScale, MIN_SCALE), MAX_SCALE);\n\n    const wx = (mx - translateX) / scale;\n    const wy = (my - translateY) / scale;\n\n    translateX -= (wx * newScale - wx * scale);\n    translateY -= (wy * newScale - wy * scale);\n    scale = newScale;\n\n    updateVisibleCells();\n    draw();\n}\n\nfunction onMouseDown(e) {\n    isDragging = true;\n    dragStartX = e.clientX;\n    dragStartY = e.clientY;\n    dragTranslateX = translateX;\n    dragTranslateY = translateY;\n    // Reset velocity on drag start to prevent coasting\n    velocityX = 0;\n    velocityY = 0;\n    canvas.style.cursor = \"grabbing\";\n    tooltip.style.display = \"none\";\n}\n\nfunction onMouseUp() {\n    isDragging = false;\n    canvas.style.cursor = \"grab\";\n}\n\nfunction onTouchStart(e) {\n    e.preventDefault(); // Prevents default touch behavior like scrolling\n    \n    if (e.touches.length === 2) {\n        // Pinch-to-zoom start\n        const touch1 = e.touches[0];\n        const touch2 = e.touches[1];\n        initialDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);\n        initialScale = scale;\n        isDragging = false;\n        tooltip.style.display = \"none\";\n    } else if (e.touches.length === 1) {\n        // Panning start\n        isDragging = true;\n        dragStartX = e.touches[0].clientX;\n        dragStartY = e.touches[0].clientY;\n        dragTranslateX = translateX;\n        dragTranslateY = translateY;\n        velocityX = 0;\n        velocityY = 0;\n        tooltip.style.display = \"none\";\n    }\n}\n\nfunction onTouchMove(e) {\n    e.preventDefault(); // Prevents default touch behavior like scrolling and pinch-zoom\n    \n    if (e.touches.length === 2 && initialDistance > 0) {\n        // Pinch-to-zoom move\n        const touch1 = e.touches[0];\n        const touch2 = e.touches[1];\n        const currentDistance = Math.hypot(touch2.clientX - touch1.clientX, touch2.clientY - touch1.clientY);\n        \n        const newScale = initialScale * (currentDistance / initialDistance);\n        scale = Math.min(Math.max(newScale, MIN_SCALE), MAX_SCALE);\n        \n        // Calculate the center of the pinch gesture\n        const centerClientX = (touch1.clientX + touch2.clientX) / 2;\n        const centerClientY = (touch1.clientY + touch2.clientY) / 2;\n\n        const oldCenterWorldX = (centerClientX * pixelRatio - dragTranslateX) / initialScale;\n        const oldCenterWorldY = (centerClientY * pixelRatio - dragTranslateY) / initialScale;\n        \n        const newCenterWorldX = (centerClientX * pixelRatio - translateX) / scale;\n        const newCenterWorldY = (centerClientY * pixelRatio - translateY) / scale;\n        \n        translateX += (newCenterWorldX - oldCenterWorldX) * scale;\n        translateY += (newCenterWorldY - oldCenterWorldY) * scale;\n        \n        updateVisibleCells();\n        draw();\n        \n    } else if (isDragging && e.touches.length === 1) {\n        // Panning move\n        const dx = e.touches[0].clientX - dragStartX;\n        const dy = e.touches[0].clientY - dragStartY;\n        translateX = dragTranslateX + dx * pixelRatio;\n        translateY = dragTranslateY + dy * pixelRatio;\n        // Update velocity for inertia effect\n        if (e.touches[0].previousClientX !== undefined) {\n             velocityX = (e.touches[0].clientX - e.touches[0].previousClientX) * pixelRatio;\n             velocityY = (e.touches[0].clientY - e.touches[0].previousClientY) * pixelRatio;\n        }\n        updateVisibleCells();\n        draw();\n    }\n}\n\nfunction onTouchEnd(e) {\n    initialDistance = -1;\n    \n    if (e.touches.length === 0) {\n      isDragging = false;\n    } else if (e.touches.length === 1) {\n      isDragging = true;\n      dragStartX = e.touches[0].clientX;\n      dragStartY = e.touches[0].clientY;\n      dragTranslateX = translateX;\n      dragTranslateY = translateY;\n    }\n}\n\nfunction resetView() {\n    scale = 1;\n    translateX = width / 2;\n    translateY = height / 2;\n    velocityX = 0;\n    velocityY = 0;\n    updateVisibleCells();\n    draw();\n}\n\n// ------- Resize & init -------\nfunction resize() {\n    width = window.innerWidth;\n    height = window.innerHeight;\n    \n    // Set the display size of the canvas (CSS pixels)\n    canvas.style.width = `${width}px`;\n    canvas.style.height = `${height}px`;\n    \n    // Set the drawing buffer size (physical pixels)\n    canvas.width = width * pixelRatio;\n    canvas.height = height * pixelRatio;\n    \n    // Scale the entire drawing context by the pixel ratio\n    ctx.setTransform(pixelRatio, 0, 0, pixelRatio, 0, 0);\n\n    if (translateX === 0 && translateY === 0) {\n        translateX = width * pixelRatio / 2;\n        translateY = height * pixelRatio / 2;\n    }\n    updateVisibleCells();\n    draw();\n}\n\n// event wiring\nmodeSelect.addEventListener(\"change\", () => {\n    visibleCells.clear();\n    updateVisibleCells();\n    draw();\n});\ncanvas.addEventListener(\"wheel\", onWheel, { passive: false });\ncanvas.addEventListener(\"mousedown\", onMouseDown);\nwindow.addEventListener(\"mousemove\", onMouseMove);\nwindow.addEventListener(\"mouseup\", onMouseUp);\n\n// Add touch event listeners for mobile support\ncanvas.addEventListener(\"touchstart\", onTouchStart, { passive: false });\nwindow.addEventListener(\"touchmove\", onTouchMove, { passive: false });\nwindow.addEventListener(\"touchend\", onTouchEnd);\n\nwindow.addEventListener(\"resize\", resize);\n\n// initial\nresize();\nanimate(); // Start the animation loop\n"],"names":["canvas","ctx","modeSelect","width","height","cellSize","scale","translateX","translateY","pixelRatio","velocityX","velocityY","friction","isDragging","dragStartX","dragStartY","dragTranslateX","dragTranslateY","initialDistance","initialScale","visibleCells","tooltip","primeCache","isPrime","n","lim","i","countFactors","count","primeFactorization","out","num","p","formatFactorization","map","parts","e","countGoldbachPairs","C2","hardyLittlewoodApproximation","ln_n","productCorrection","factors","ulamNumberAt","x","y","layer","legLen","maxVal","isGaussianPrime","a","b","A","B","isEisensteinPrime","norm","sqrt3","eisensteinToCanvas","size","canvasToEisenstein","b_frac","cx_frac","cz_frac","cy_frac","cx_round","cy_round","cz_round","cx_diff","cy_diff","cz_diff","drawHex","fillStyle","strokeStyle","lineWidth","angle","dx","dy","pickColorForCell","lowerCaseMode","actualPairs","normalizationFactor","hue","f","brightness","marginCells","MIN_SCALE","MAX_SCALE","updateVisibleCells","mode","isEisensteinMode","viewLeft","viewRight","viewTop","viewBottom","hexRadius","hexWidth","hexHeight","a1","b1","a2","b2","a3","b3","a4","b4","aMin","aMax","bMin","bMax","cellX","cellY","key","label","value","color","cellW","cellH","left","right","top","bottom","gy","gx","draw","axisLen","e1x","e1y","e2x","e2y","cell","animate","getCellUnderMouse","mouseX","mouseY","xCanvas","yCanvas","onMouseMove","tooltipText","coordLabel","actual","expected","ratio","fc","pf","gp","ep","padding","onWheel","mx","my","delta","newScale","wx","wy","onMouseDown","onMouseUp","onTouchStart","touch1","touch2","onTouchMove","currentDistance","centerClientX","centerClientY","oldCenterWorldX","oldCenterWorldY","newCenterWorldX","newCenterWorldY","onTouchEnd","resize"],"mappings":"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"}