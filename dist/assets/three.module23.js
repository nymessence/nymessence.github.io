/**
 * @license
 * Copyright 2010-2025 Three.js Authors
 * SPDX-License-Identifier: MIT
 */const G="srgb",Fi="srgb-linear",Ii="linear",ui="srgb";class li{addEventListener(t,i){this._listeners===void 0&&(this._listeners={});const s=this._listeners;s[t]===void 0&&(s[t]=[]),s[t].indexOf(i)===-1&&s[t].push(i)}hasEventListener(t,i){const s=this._listeners;return s===void 0?!1:s[t]!==void 0&&s[t].indexOf(i)!==-1}removeEventListener(t,i){const s=this._listeners;if(s===void 0)return;const e=s[t];if(e!==void 0){const r=e.indexOf(i);r!==-1&&e.splice(r,1)}}dispatchEvent(t){const i=this._listeners;if(i===void 0)return;const s=i[t.type];if(s!==void 0){t.target=this;const e=s.slice(0);for(let r=0,n=e.length;r<n;r++)e[r].call(this,t);t.target=null}}}const N=["00","01","02","03","04","05","06","07","08","09","0a","0b","0c","0d","0e","0f","10","11","12","13","14","15","16","17","18","19","1a","1b","1c","1d","1e","1f","20","21","22","23","24","25","26","27","28","29","2a","2b","2c","2d","2e","2f","30","31","32","33","34","35","36","37","38","39","3a","3b","3c","3d","3e","3f","40","41","42","43","44","45","46","47","48","49","4a","4b","4c","4d","4e","4f","50","51","52","53","54","55","56","57","58","59","5a","5b","5c","5d","5e","5f","60","61","62","63","64","65","66","67","68","69","6a","6b","6c","6d","6e","6f","70","71","72","73","74","75","76","77","78","79","7a","7b","7c","7d","7e","7f","80","81","82","83","84","85","86","87","88","89","8a","8b","8c","8d","8e","8f","90","91","92","93","94","95","96","97","98","99","9a","9b","9c","9d","9e","9f","a0","a1","a2","a3","a4","a5","a6","a7","a8","a9","aa","ab","ac","ad","ae","af","b0","b1","b2","b3","b4","b5","b6","b7","b8","b9","ba","bb","bc","bd","be","bf","c0","c1","c2","c3","c4","c5","c6","c7","c8","c9","ca","cb","cc","cd","ce","cf","d0","d1","d2","d3","d4","d5","d6","d7","d8","d9","da","db","dc","dd","de","df","e0","e1","e2","e3","e4","e5","e6","e7","e8","e9","ea","eb","ec","ed","ee","ef","f0","f1","f2","f3","f4","f5","f6","f7","f8","f9","fa","fb","fc","fd","fe","ff"];function It(){const f=Math.random()*4294967295|0,t=Math.random()*4294967295|0,i=Math.random()*4294967295|0,s=Math.random()*4294967295|0;return(N[f&255]+N[f>>8&255]+N[f>>16&255]+N[f>>24&255]+"-"+N[t&255]+N[t>>8&255]+"-"+N[t>>16&15|64]+N[t>>24&255]+"-"+N[i&63|128]+N[i>>8&255]+"-"+N[i>>16&255]+N[i>>24&255]+N[s&255]+N[s>>8&255]+N[s>>16&255]+N[s>>24&255]).toLowerCase()}function T(f,t,i){return Math.max(t,Math.min(i,f))}function rs(f,t){return(f%t+t)%t}function ci(f,t,i){return(1-i)*f+i*t}function Et(f,t){switch(t.constructor){case Float32Array:return f;case Uint32Array:return f/4294967295;case Uint16Array:return f/65535;case Uint8Array:return f/255;case Int32Array:return Math.max(f/2147483647,-1);case Int16Array:return Math.max(f/32767,-1);case Int8Array:return Math.max(f/127,-1);default:throw new Error("Invalid component type.")}}function U(f,t){switch(t.constructor){case Float32Array:return f;case Uint32Array:return Math.round(f*4294967295);case Uint16Array:return Math.round(f*65535);case Uint8Array:return Math.round(f*255);case Int32Array:return Math.round(f*2147483647);case Int16Array:return Math.round(f*32767);case Int8Array:return Math.round(f*127);default:throw new Error("Invalid component type.")}}class R{constructor(t=0,i=0){R.prototype.isVector2=!0,this.x=t,this.y=i}get width(){return this.x}set width(t){this.x=t}get height(){return this.y}set height(t){this.y=t}set(t,i){return this.x=t,this.y=i,this}setScalar(t){return this.x=t,this.y=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y)}copy(t){return this.x=t.x,this.y=t.y,this}add(t){return this.x+=t.x,this.y+=t.y,this}addScalar(t){return this.x+=t,this.y+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this}subScalar(t){return this.x-=t,this.y-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this}multiply(t){return this.x*=t.x,this.y*=t.y,this}multiplyScalar(t){return this.x*=t,this.y*=t,this}divide(t){return this.x/=t.x,this.y/=t.y,this}divideScalar(t){return this.multiplyScalar(1/t)}applyMatrix3(t){const i=this.x,s=this.y,e=t.elements;return this.x=e[0]*i+e[3]*s+e[6],this.y=e[1]*i+e[4]*s+e[7],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this}clamp(t,i){return this.x=T(this.x,t.x,i.x),this.y=T(this.y,t.y,i.y),this}clampScalar(t,i){return this.x=T(this.x,t,i),this.y=T(this.y,t,i),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(T(s,t,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this}negate(){return this.x=-this.x,this.y=-this.y,this}dot(t){return this.x*t.x+this.y*t.y}cross(t){return this.x*t.y-this.y*t.x}lengthSq(){return this.x*this.x+this.y*this.y}length(){return Math.sqrt(this.x*this.x+this.y*this.y)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)}normalize(){return this.divideScalar(this.length()||1)}angle(){return Math.atan2(-this.y,-this.x)+Math.PI}angleTo(t){const i=Math.sqrt(this.lengthSq()*t.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(t)/i;return Math.acos(T(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const i=this.x-t.x,s=this.y-t.y;return i*i+s*s}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this}equals(t){return t.x===this.x&&t.y===this.y}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this}rotateAround(t,i){const s=Math.cos(i),e=Math.sin(i),r=this.x-t.x,n=this.y-t.y;return this.x=r*s-n*e+t.x,this.y=r*e+n*s+t.y,this}random(){return this.x=Math.random(),this.y=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y}}class Pt{constructor(t=0,i=0,s=0,e=1){this.isQuaternion=!0,this._x=t,this._y=i,this._z=s,this._w=e}static slerpFlat(t,i,s,e,r,n,a){let o=s[e+0],h=s[e+1],l=s[e+2],u=s[e+3];const c=r[n+0],d=r[n+1],p=r[n+2],y=r[n+3];if(a===0){t[i+0]=o,t[i+1]=h,t[i+2]=l,t[i+3]=u;return}if(a===1){t[i+0]=c,t[i+1]=d,t[i+2]=p,t[i+3]=y;return}if(u!==y||o!==c||h!==d||l!==p){let x=1-a;const g=o*c+h*d+l*p+u*y,v=g>=0?1:-1,S=1-g*g;if(S>Number.EPSILON){const z=Math.sqrt(S),C=Math.atan2(z,g*v);x=Math.sin(x*C)/z,a=Math.sin(a*C)/z}const w=a*v;if(o=o*x+c*w,h=h*x+d*w,l=l*x+p*w,u=u*x+y*w,x===1-a){const z=1/Math.sqrt(o*o+h*h+l*l+u*u);o*=z,h*=z,l*=z,u*=z}}t[i]=o,t[i+1]=h,t[i+2]=l,t[i+3]=u}static multiplyQuaternionsFlat(t,i,s,e,r,n){const a=s[e],o=s[e+1],h=s[e+2],l=s[e+3],u=r[n],c=r[n+1],d=r[n+2],p=r[n+3];return t[i]=a*p+l*u+o*d-h*c,t[i+1]=o*p+l*c+h*u-a*d,t[i+2]=h*p+l*d+a*c-o*u,t[i+3]=l*p-a*u-o*c-h*d,t}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get w(){return this._w}set w(t){this._w=t,this._onChangeCallback()}set(t,i,s,e){return this._x=t,this._y=i,this._z=s,this._w=e,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._w)}copy(t){return this._x=t.x,this._y=t.y,this._z=t.z,this._w=t.w,this._onChangeCallback(),this}setFromEuler(t,i=!0){const s=t._x,e=t._y,r=t._z,n=t._order,a=Math.cos,o=Math.sin,h=a(s/2),l=a(e/2),u=a(r/2),c=o(s/2),d=o(e/2),p=o(r/2);switch(n){case"XYZ":this._x=c*l*u+h*d*p,this._y=h*d*u-c*l*p,this._z=h*l*p+c*d*u,this._w=h*l*u-c*d*p;break;case"YXZ":this._x=c*l*u+h*d*p,this._y=h*d*u-c*l*p,this._z=h*l*p-c*d*u,this._w=h*l*u+c*d*p;break;case"ZXY":this._x=c*l*u-h*d*p,this._y=h*d*u+c*l*p,this._z=h*l*p+c*d*u,this._w=h*l*u-c*d*p;break;case"ZYX":this._x=c*l*u-h*d*p,this._y=h*d*u+c*l*p,this._z=h*l*p-c*d*u,this._w=h*l*u+c*d*p;break;case"YZX":this._x=c*l*u+h*d*p,this._y=h*d*u+c*l*p,this._z=h*l*p-c*d*u,this._w=h*l*u-c*d*p;break;case"XZY":this._x=c*l*u-h*d*p,this._y=h*d*u-c*l*p,this._z=h*l*p+c*d*u,this._w=h*l*u+c*d*p;break;default:console.warn("THREE.Quaternion: .setFromEuler() encountered an unknown order: "+n)}return i===!0&&this._onChangeCallback(),this}setFromAxisAngle(t,i){const s=i/2,e=Math.sin(s);return this._x=t.x*e,this._y=t.y*e,this._z=t.z*e,this._w=Math.cos(s),this._onChangeCallback(),this}setFromRotationMatrix(t){const i=t.elements,s=i[0],e=i[4],r=i[8],n=i[1],a=i[5],o=i[9],h=i[2],l=i[6],u=i[10],c=s+a+u;if(c>0){const d=.5/Math.sqrt(c+1);this._w=.25/d,this._x=(l-o)*d,this._y=(r-h)*d,this._z=(n-e)*d}else if(s>a&&s>u){const d=2*Math.sqrt(1+s-a-u);this._w=(l-o)/d,this._x=.25*d,this._y=(e+n)/d,this._z=(r+h)/d}else if(a>u){const d=2*Math.sqrt(1+a-s-u);this._w=(r-h)/d,this._x=(e+n)/d,this._y=.25*d,this._z=(o+l)/d}else{const d=2*Math.sqrt(1+u-s-a);this._w=(n-e)/d,this._x=(r+h)/d,this._y=(o+l)/d,this._z=.25*d}return this._onChangeCallback(),this}setFromUnitVectors(t,i){let s=t.dot(i)+1;return s<1e-8?(s=0,Math.abs(t.x)>Math.abs(t.z)?(this._x=-t.y,this._y=t.x,this._z=0,this._w=s):(this._x=0,this._y=-t.z,this._z=t.y,this._w=s)):(this._x=t.y*i.z-t.z*i.y,this._y=t.z*i.x-t.x*i.z,this._z=t.x*i.y-t.y*i.x,this._w=s),this.normalize()}angleTo(t){return 2*Math.acos(Math.abs(T(this.dot(t),-1,1)))}rotateTowards(t,i){const s=this.angleTo(t);if(s===0)return this;const e=Math.min(1,i/s);return this.slerp(t,e),this}identity(){return this.set(0,0,0,1)}invert(){return this.conjugate()}conjugate(){return this._x*=-1,this._y*=-1,this._z*=-1,this._onChangeCallback(),this}dot(t){return this._x*t._x+this._y*t._y+this._z*t._z+this._w*t._w}lengthSq(){return this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w}length(){return Math.sqrt(this._x*this._x+this._y*this._y+this._z*this._z+this._w*this._w)}normalize(){let t=this.length();return t===0?(this._x=0,this._y=0,this._z=0,this._w=1):(t=1/t,this._x=this._x*t,this._y=this._y*t,this._z=this._z*t,this._w=this._w*t),this._onChangeCallback(),this}multiply(t){return this.multiplyQuaternions(this,t)}premultiply(t){return this.multiplyQuaternions(t,this)}multiplyQuaternions(t,i){const s=t._x,e=t._y,r=t._z,n=t._w,a=i._x,o=i._y,h=i._z,l=i._w;return this._x=s*l+n*a+e*h-r*o,this._y=e*l+n*o+r*a-s*h,this._z=r*l+n*h+s*o-e*a,this._w=n*l-s*a-e*o-r*h,this._onChangeCallback(),this}slerp(t,i){if(i===0)return this;if(i===1)return this.copy(t);const s=this._x,e=this._y,r=this._z,n=this._w;let a=n*t._w+s*t._x+e*t._y+r*t._z;if(a<0?(this._w=-t._w,this._x=-t._x,this._y=-t._y,this._z=-t._z,a=-a):this.copy(t),a>=1)return this._w=n,this._x=s,this._y=e,this._z=r,this;const o=1-a*a;if(o<=Number.EPSILON){const d=1-i;return this._w=d*n+i*this._w,this._x=d*s+i*this._x,this._y=d*e+i*this._y,this._z=d*r+i*this._z,this.normalize(),this}const h=Math.sqrt(o),l=Math.atan2(h,a),u=Math.sin((1-i)*l)/h,c=Math.sin(i*l)/h;return this._w=n*u+this._w*c,this._x=s*u+this._x*c,this._y=e*u+this._y*c,this._z=r*u+this._z*c,this._onChangeCallback(),this}slerpQuaternions(t,i,s){return this.copy(t).slerp(i,s)}random(){const t=2*Math.PI*Math.random(),i=2*Math.PI*Math.random(),s=Math.random(),e=Math.sqrt(1-s),r=Math.sqrt(s);return this.set(e*Math.sin(t),e*Math.cos(t),r*Math.sin(i),r*Math.cos(i))}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._w===this._w}fromArray(t,i=0){return this._x=t[i],this._y=t[i+1],this._z=t[i+2],this._w=t[i+3],this._onChangeCallback(),this}toArray(t=[],i=0){return t[i]=this._x,t[i+1]=this._y,t[i+2]=this._z,t[i+3]=this._w,t}fromBufferAttribute(t,i){return this._x=t.getX(i),this._y=t.getY(i),this._z=t.getZ(i),this._w=t.getW(i),this._onChangeCallback(),this}toJSON(){return this.toArray()}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._w}}class m{constructor(t=0,i=0,s=0){m.prototype.isVector3=!0,this.x=t,this.y=i,this.z=s}set(t,i,s){return s===void 0&&(s=this.z),this.x=t,this.y=i,this.z=s,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this.z=t.z+i.z,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this.z+=t.z*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this.z=t.z-i.z,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this}multiplyVectors(t,i){return this.x=t.x*i.x,this.y=t.y*i.y,this.z=t.z*i.z,this}applyEuler(t){return this.applyQuaternion(Pi.setFromEuler(t))}applyAxisAngle(t,i){return this.applyQuaternion(Pi.setFromAxisAngle(t,i))}applyMatrix3(t){const i=this.x,s=this.y,e=this.z,r=t.elements;return this.x=r[0]*i+r[3]*s+r[6]*e,this.y=r[1]*i+r[4]*s+r[7]*e,this.z=r[2]*i+r[5]*s+r[8]*e,this}applyNormalMatrix(t){return this.applyMatrix3(t).normalize()}applyMatrix4(t){const i=this.x,s=this.y,e=this.z,r=t.elements,n=1/(r[3]*i+r[7]*s+r[11]*e+r[15]);return this.x=(r[0]*i+r[4]*s+r[8]*e+r[12])*n,this.y=(r[1]*i+r[5]*s+r[9]*e+r[13])*n,this.z=(r[2]*i+r[6]*s+r[10]*e+r[14])*n,this}applyQuaternion(t){const i=this.x,s=this.y,e=this.z,r=t.x,n=t.y,a=t.z,o=t.w,h=2*(n*e-a*s),l=2*(a*i-r*e),u=2*(r*s-n*i);return this.x=i+o*h+n*u-a*l,this.y=s+o*l+a*h-r*u,this.z=e+o*u+r*l-n*h,this}project(t){return this.applyMatrix4(t.matrixWorldInverse).applyMatrix4(t.projectionMatrix)}unproject(t){return this.applyMatrix4(t.projectionMatrixInverse).applyMatrix4(t.matrixWorld)}transformDirection(t){const i=this.x,s=this.y,e=this.z,r=t.elements;return this.x=r[0]*i+r[4]*s+r[8]*e,this.y=r[1]*i+r[5]*s+r[9]*e,this.z=r[2]*i+r[6]*s+r[10]*e,this.normalize()}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this}divideScalar(t){return this.multiplyScalar(1/t)}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this}clamp(t,i){return this.x=T(this.x,t.x,i.x),this.y=T(this.y,t.y,i.y),this.z=T(this.z,t.z,i.z),this}clampScalar(t,i){return this.x=T(this.x,t,i),this.y=T(this.y,t,i),this.z=T(this.z,t,i),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(T(s,t,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this.z+=(t.z-this.z)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this.z=t.z+(i.z-t.z)*s,this}cross(t){return this.crossVectors(this,t)}crossVectors(t,i){const s=t.x,e=t.y,r=t.z,n=i.x,a=i.y,o=i.z;return this.x=e*o-r*a,this.y=r*n-s*o,this.z=s*a-e*n,this}projectOnVector(t){const i=t.lengthSq();if(i===0)return this.set(0,0,0);const s=t.dot(this)/i;return this.copy(t).multiplyScalar(s)}projectOnPlane(t){return di.copy(this).projectOnVector(t),this.sub(di)}reflect(t){return this.sub(di.copy(t).multiplyScalar(2*this.dot(t)))}angleTo(t){const i=Math.sqrt(this.lengthSq()*t.lengthSq());if(i===0)return Math.PI/2;const s=this.dot(t)/i;return Math.acos(T(s,-1,1))}distanceTo(t){return Math.sqrt(this.distanceToSquared(t))}distanceToSquared(t){const i=this.x-t.x,s=this.y-t.y,e=this.z-t.z;return i*i+s*s+e*e}manhattanDistanceTo(t){return Math.abs(this.x-t.x)+Math.abs(this.y-t.y)+Math.abs(this.z-t.z)}setFromSpherical(t){return this.setFromSphericalCoords(t.radius,t.phi,t.theta)}setFromSphericalCoords(t,i,s){const e=Math.sin(i)*t;return this.x=e*Math.sin(s),this.y=Math.cos(i)*t,this.z=e*Math.cos(s),this}setFromCylindrical(t){return this.setFromCylindricalCoords(t.radius,t.theta,t.y)}setFromCylindricalCoords(t,i,s){return this.x=t*Math.sin(i),this.y=s,this.z=t*Math.cos(i),this}setFromMatrixPosition(t){const i=t.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this}setFromMatrixScale(t){const i=this.setFromMatrixColumn(t,0).length(),s=this.setFromMatrixColumn(t,1).length(),e=this.setFromMatrixColumn(t,2).length();return this.x=i,this.y=s,this.z=e,this}setFromMatrixColumn(t,i){return this.fromArray(t.elements,i*4)}setFromMatrix3Column(t,i){return this.fromArray(t.elements,i*3)}setFromEuler(t){return this.x=t._x,this.y=t._y,this.z=t._z,this}setFromColor(t){return this.x=t.r,this.y=t.g,this.z=t.b,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this.z=t[i+2],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t[i+2]=this.z,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this.z=t.getZ(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this}randomDirection(){const t=Math.random()*Math.PI*2,i=Math.random()*2-1,s=Math.sqrt(1-i*i);return this.x=s*Math.cos(t),this.y=i,this.z=s*Math.sin(t),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z}}const di=new m,Pi=new Pt;class b{constructor(t,i,s,e,r,n,a,o,h){b.prototype.isMatrix3=!0,this.elements=[1,0,0,0,1,0,0,0,1],t!==void 0&&this.set(t,i,s,e,r,n,a,o,h)}set(t,i,s,e,r,n,a,o,h){const l=this.elements;return l[0]=t,l[1]=e,l[2]=a,l[3]=i,l[4]=r,l[5]=o,l[6]=s,l[7]=n,l[8]=h,this}identity(){return this.set(1,0,0,0,1,0,0,0,1),this}copy(t){const i=this.elements,s=t.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],this}extractBasis(t,i,s){return t.setFromMatrix3Column(this,0),i.setFromMatrix3Column(this,1),s.setFromMatrix3Column(this,2),this}setFromMatrix4(t){const i=t.elements;return this.set(i[0],i[4],i[8],i[1],i[5],i[9],i[2],i[6],i[10]),this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,i){const s=t.elements,e=i.elements,r=this.elements,n=s[0],a=s[3],o=s[6],h=s[1],l=s[4],u=s[7],c=s[2],d=s[5],p=s[8],y=e[0],x=e[3],g=e[6],v=e[1],S=e[4],w=e[7],z=e[2],C=e[5],_=e[8];return r[0]=n*y+a*v+o*z,r[3]=n*x+a*S+o*C,r[6]=n*g+a*w+o*_,r[1]=h*y+l*v+u*z,r[4]=h*x+l*S+u*C,r[7]=h*g+l*w+u*_,r[2]=c*y+d*v+p*z,r[5]=c*x+d*S+p*C,r[8]=c*g+d*w+p*_,this}multiplyScalar(t){const i=this.elements;return i[0]*=t,i[3]*=t,i[6]*=t,i[1]*=t,i[4]*=t,i[7]*=t,i[2]*=t,i[5]*=t,i[8]*=t,this}determinant(){const t=this.elements,i=t[0],s=t[1],e=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8];return i*n*l-i*a*h-s*r*l+s*a*o+e*r*h-e*n*o}invert(){const t=this.elements,i=t[0],s=t[1],e=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8],u=l*n-a*h,c=a*o-l*r,d=h*r-n*o,p=i*u+s*c+e*d;if(p===0)return this.set(0,0,0,0,0,0,0,0,0);const y=1/p;return t[0]=u*y,t[1]=(e*h-l*s)*y,t[2]=(a*s-e*n)*y,t[3]=c*y,t[4]=(l*i-e*o)*y,t[5]=(e*r-a*i)*y,t[6]=d*y,t[7]=(s*o-h*i)*y,t[8]=(n*i-s*r)*y,this}transpose(){let t;const i=this.elements;return t=i[1],i[1]=i[3],i[3]=t,t=i[2],i[2]=i[6],i[6]=t,t=i[5],i[5]=i[7],i[7]=t,this}getNormalMatrix(t){return this.setFromMatrix4(t).invert().transpose()}transposeIntoArray(t){const i=this.elements;return t[0]=i[0],t[1]=i[3],t[2]=i[6],t[3]=i[1],t[4]=i[4],t[5]=i[7],t[6]=i[2],t[7]=i[5],t[8]=i[8],this}setUvTransform(t,i,s,e,r,n,a){const o=Math.cos(r),h=Math.sin(r);return this.set(s*o,s*h,-s*(o*n+h*a)+n+t,-e*h,e*o,-e*(-h*n+o*a)+a+i,0,0,1),this}scale(t,i){return this.premultiply(pi.makeScale(t,i)),this}rotate(t){return this.premultiply(pi.makeRotation(-t)),this}translate(t,i){return this.premultiply(pi.makeTranslation(t,i)),this}makeTranslation(t,i){return t.isVector2?this.set(1,0,t.x,0,1,t.y,0,0,1):this.set(1,0,t,0,1,i,0,0,1),this}makeRotation(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,-s,0,s,i,0,0,0,1),this}makeScale(t,i){return this.set(t,0,0,0,i,0,0,0,1),this}equals(t){const i=this.elements,s=t.elements;for(let e=0;e<9;e++)if(i[e]!==s[e])return!1;return!0}fromArray(t,i=0){for(let s=0;s<9;s++)this.elements[s]=t[s+i];return this}toArray(t=[],i=0){const s=this.elements;return t[i]=s[0],t[i+1]=s[1],t[i+2]=s[2],t[i+3]=s[3],t[i+4]=s[4],t[i+5]=s[5],t[i+6]=s[6],t[i+7]=s[7],t[i+8]=s[8],t}clone(){return new this.constructor().fromArray(this.elements)}}const pi=new b;function ns(f){for(let t=f.length-1;t>=0;--t)if(f[t]>=65535)return!0;return!1}function Ni(f){return document.createElementNS("http://www.w3.org/1999/xhtml",f)}const Vi={};function Di(f){f in Vi||(Vi[f]=!0,console.warn(f))}const Ui=new b().set(.4123908,.3575843,.1804808,.212639,.7151687,.0721923,.0193308,.1191948,.9505322),Li=new b().set(3.2409699,-1.5373832,-.4986108,-.9692436,1.8759675,.0415551,.0556301,-.203977,1.0569715);function as(){const f={enabled:!0,workingColorSpace:Fi,spaces:{},convert:function(e,r,n){return this.enabled===!1||r===n||!r||!n||(this.spaces[r].transfer===ui&&(e.r=rt(e.r),e.g=rt(e.g),e.b=rt(e.b)),this.spaces[r].primaries!==this.spaces[n].primaries&&(e.applyMatrix3(this.spaces[r].toXYZ),e.applyMatrix3(this.spaces[n].fromXYZ)),this.spaces[n].transfer===ui&&(e.r=At(e.r),e.g=At(e.g),e.b=At(e.b))),e},workingToColorSpace:function(e,r){return this.convert(e,this.workingColorSpace,r)},colorSpaceToWorking:function(e,r){return this.convert(e,r,this.workingColorSpace)},getPrimaries:function(e){return this.spaces[e].primaries},getTransfer:function(e){return e===""?Ii:this.spaces[e].transfer},getLuminanceCoefficients:function(e,r=this.workingColorSpace){return e.fromArray(this.spaces[r].luminanceCoefficients)},define:function(e){Object.assign(this.spaces,e)},_getMatrix:function(e,r,n){return e.copy(this.spaces[r].toXYZ).multiply(this.spaces[n].fromXYZ)},_getDrawingBufferColorSpace:function(e){return this.spaces[e].outputColorSpaceConfig.drawingBufferColorSpace},_getUnpackColorSpace:function(e=this.workingColorSpace){return this.spaces[e].workingColorSpaceConfig.unpackColorSpace},fromWorkingColorSpace:function(e,r){return Di("THREE.ColorManagement: .fromWorkingColorSpace() has been renamed to .workingToColorSpace()."),f.workingToColorSpace(e,r)},toWorkingColorSpace:function(e,r){return Di("THREE.ColorManagement: .toWorkingColorSpace() has been renamed to .colorSpaceToWorking()."),f.colorSpaceToWorking(e,r)}},t=[.64,.33,.3,.6,.15,.06],i=[.2126,.7152,.0722],s=[.3127,.329];return f.define({[Fi]:{primaries:t,whitePoint:s,transfer:Ii,toXYZ:Ui,fromXYZ:Li,luminanceCoefficients:i,workingColorSpaceConfig:{unpackColorSpace:G},outputColorSpaceConfig:{drawingBufferColorSpace:G}},[G]:{primaries:t,whitePoint:s,transfer:ui,toXYZ:Ui,fromXYZ:Li,luminanceCoefficients:i,outputColorSpaceConfig:{drawingBufferColorSpace:G}}}),f}const j=as();function rt(f){return f<.04045?f*.0773993808:Math.pow(f*.9478672986+.0521327014,2.4)}function At(f){return f<.0031308?f*12.92:1.055*Math.pow(f,.41666)-.055}let ft;class hs{static getDataURL(t,i="image/png"){if(/^data:/i.test(t.src)||typeof HTMLCanvasElement>"u")return t.src;let s;if(t instanceof HTMLCanvasElement)s=t;else{ft===void 0&&(ft=Ni("canvas")),ft.width=t.width,ft.height=t.height;const e=ft.getContext("2d");t instanceof ImageData?e.putImageData(t,0,0):e.drawImage(t,0,0,t.width,t.height),s=ft}return s.toDataURL(i)}static sRGBToLinear(t){if(typeof HTMLImageElement<"u"&&t instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&t instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&t instanceof ImageBitmap){const i=Ni("canvas");i.width=t.width,i.height=t.height;const s=i.getContext("2d");s.drawImage(t,0,0,t.width,t.height);const e=s.getImageData(0,0,t.width,t.height),r=e.data;for(let n=0;n<r.length;n++)r[n]=rt(r[n]/255)*255;return s.putImageData(e,0,0),i}else if(t.data){const i=t.data.slice(0);for(let s=0;s<i.length;s++)i instanceof Uint8Array||i instanceof Uint8ClampedArray?i[s]=Math.floor(rt(i[s]/255)*255):i[s]=rt(i[s]);return{data:i,width:t.width,height:t.height}}else return console.warn("THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied."),t}}let os=0;class is{constructor(t=null){this.isSource=!0,Object.defineProperty(this,"id",{value:os++}),this.uuid=It(),this.data=t,this.dataReady=!0,this.version=0}getSize(t){const i=this.data;return i instanceof HTMLVideoElement?t.set(i.videoWidth,i.videoHeight,0):i instanceof VideoFrame?t.set(i.displayHeight,i.displayWidth,0):i!==null?t.set(i.width,i.height,i.depth||0):t.set(0,0,0),t}set needsUpdate(t){t===!0&&this.version++}toJSON(t){const i=t===void 0||typeof t=="string";if(!i&&t.images[this.uuid]!==void 0)return t.images[this.uuid];const s={uuid:this.uuid,url:""},e=this.data;if(e!==null){let r;if(Array.isArray(e)){r=[];for(let n=0,a=e.length;n<a;n++)e[n].isDataTexture?r.push(mi(e[n].image)):r.push(mi(e[n]))}else r=mi(e);s.url=r}return i||(t.images[this.uuid]=s),s}}function mi(f){return typeof HTMLImageElement<"u"&&f instanceof HTMLImageElement||typeof HTMLCanvasElement<"u"&&f instanceof HTMLCanvasElement||typeof ImageBitmap<"u"&&f instanceof ImageBitmap?hs.getDataURL(f):f.data?{data:Array.from(f.data),width:f.width,height:f.height,type:f.data.constructor.name}:(console.warn("THREE.Texture: Unable to serialize Texture."),{})}let ls=0;const yi=new m;class X extends li{constructor(t=X.DEFAULT_IMAGE,i=X.DEFAULT_MAPPING,s=1001,e=1001,r=1006,n=1008,a=1023,o=1009,h=X.DEFAULT_ANISOTROPY,l=""){super(),this.isTexture=!0,Object.defineProperty(this,"id",{value:ls++}),this.uuid=It(),this.name="",this.source=new is(t),this.mipmaps=[],this.mapping=i,this.channel=0,this.wrapS=s,this.wrapT=e,this.magFilter=r,this.minFilter=n,this.anisotropy=h,this.format=a,this.internalFormat=null,this.type=o,this.offset=new R(0,0),this.repeat=new R(1,1),this.center=new R(0,0),this.rotation=0,this.matrixAutoUpdate=!0,this.matrix=new b,this.generateMipmaps=!0,this.premultiplyAlpha=!1,this.flipY=!0,this.unpackAlignment=4,this.colorSpace=l,this.userData={},this.updateRanges=[],this.version=0,this.onUpdate=null,this.renderTarget=null,this.isRenderTargetTexture=!1,this.isArrayTexture=!!(t&&t.depth&&t.depth>1),this.pmremVersion=0}get width(){return this.source.getSize(yi).x}get height(){return this.source.getSize(yi).y}get depth(){return this.source.getSize(yi).z}get image(){return this.source.data}set image(t=null){this.source.data=t}updateMatrix(){this.matrix.setUvTransform(this.offset.x,this.offset.y,this.repeat.x,this.repeat.y,this.rotation,this.center.x,this.center.y)}addUpdateRange(t,i){this.updateRanges.push({start:t,count:i})}clearUpdateRanges(){this.updateRanges.length=0}clone(){return new this.constructor().copy(this)}copy(t){return this.name=t.name,this.source=t.source,this.mipmaps=t.mipmaps.slice(0),this.mapping=t.mapping,this.channel=t.channel,this.wrapS=t.wrapS,this.wrapT=t.wrapT,this.magFilter=t.magFilter,this.minFilter=t.minFilter,this.anisotropy=t.anisotropy,this.format=t.format,this.internalFormat=t.internalFormat,this.type=t.type,this.offset.copy(t.offset),this.repeat.copy(t.repeat),this.center.copy(t.center),this.rotation=t.rotation,this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrix.copy(t.matrix),this.generateMipmaps=t.generateMipmaps,this.premultiplyAlpha=t.premultiplyAlpha,this.flipY=t.flipY,this.unpackAlignment=t.unpackAlignment,this.colorSpace=t.colorSpace,this.renderTarget=t.renderTarget,this.isRenderTargetTexture=t.isRenderTargetTexture,this.isArrayTexture=t.isArrayTexture,this.userData=JSON.parse(JSON.stringify(t.userData)),this.needsUpdate=!0,this}setValues(t){for(const i in t){const s=t[i];if(s===void 0){console.warn(`THREE.Texture.setValues(): parameter '${i}' has value of undefined.`);continue}const e=this[i];if(e===void 0){console.warn(`THREE.Texture.setValues(): property '${i}' does not exist.`);continue}e&&s&&e.isVector2&&s.isVector2||e&&s&&e.isVector3&&s.isVector3||e&&s&&e.isMatrix3&&s.isMatrix3?e.copy(s):this[i]=s}}toJSON(t){const i=t===void 0||typeof t=="string";if(!i&&t.textures[this.uuid]!==void 0)return t.textures[this.uuid];const s={metadata:{version:4.7,type:"Texture",generator:"Texture.toJSON"},uuid:this.uuid,name:this.name,image:this.source.toJSON(t).uuid,mapping:this.mapping,channel:this.channel,repeat:[this.repeat.x,this.repeat.y],offset:[this.offset.x,this.offset.y],center:[this.center.x,this.center.y],rotation:this.rotation,wrap:[this.wrapS,this.wrapT],format:this.format,internalFormat:this.internalFormat,type:this.type,colorSpace:this.colorSpace,minFilter:this.minFilter,magFilter:this.magFilter,anisotropy:this.anisotropy,flipY:this.flipY,generateMipmaps:this.generateMipmaps,premultiplyAlpha:this.premultiplyAlpha,unpackAlignment:this.unpackAlignment};return Object.keys(this.userData).length>0&&(s.userData=this.userData),i||(t.textures[this.uuid]=s),s}dispose(){this.dispatchEvent({type:"dispose"})}transformUv(t){if(this.mapping!==300)return t;if(t.applyMatrix3(this.matrix),t.x<0||t.x>1)switch(this.wrapS){case 1e3:t.x=t.x-Math.floor(t.x);break;case 1001:t.x=t.x<0?0:1;break;case 1002:Math.abs(Math.floor(t.x)%2)===1?t.x=Math.ceil(t.x)-t.x:t.x=t.x-Math.floor(t.x);break}if(t.y<0||t.y>1)switch(this.wrapT){case 1e3:t.y=t.y-Math.floor(t.y);break;case 1001:t.y=t.y<0?0:1;break;case 1002:Math.abs(Math.floor(t.y)%2)===1?t.y=Math.ceil(t.y)-t.y:t.y=t.y-Math.floor(t.y);break}return this.flipY&&(t.y=1-t.y),t}set needsUpdate(t){t===!0&&(this.version++,this.source.needsUpdate=!0)}set needsPMREMUpdate(t){t===!0&&this.pmremVersion++}}X.DEFAULT_IMAGE=null;X.DEFAULT_MAPPING=300;X.DEFAULT_ANISOTROPY=1;class Nt{constructor(t=0,i=0,s=0,e=1){Nt.prototype.isVector4=!0,this.x=t,this.y=i,this.z=s,this.w=e}get width(){return this.z}set width(t){this.z=t}get height(){return this.w}set height(t){this.w=t}set(t,i,s,e){return this.x=t,this.y=i,this.z=s,this.w=e,this}setScalar(t){return this.x=t,this.y=t,this.z=t,this.w=t,this}setX(t){return this.x=t,this}setY(t){return this.y=t,this}setZ(t){return this.z=t,this}setW(t){return this.w=t,this}setComponent(t,i){switch(t){case 0:this.x=i;break;case 1:this.y=i;break;case 2:this.z=i;break;case 3:this.w=i;break;default:throw new Error("index is out of range: "+t)}return this}getComponent(t){switch(t){case 0:return this.x;case 1:return this.y;case 2:return this.z;case 3:return this.w;default:throw new Error("index is out of range: "+t)}}clone(){return new this.constructor(this.x,this.y,this.z,this.w)}copy(t){return this.x=t.x,this.y=t.y,this.z=t.z,this.w=t.w!==void 0?t.w:1,this}add(t){return this.x+=t.x,this.y+=t.y,this.z+=t.z,this.w+=t.w,this}addScalar(t){return this.x+=t,this.y+=t,this.z+=t,this.w+=t,this}addVectors(t,i){return this.x=t.x+i.x,this.y=t.y+i.y,this.z=t.z+i.z,this.w=t.w+i.w,this}addScaledVector(t,i){return this.x+=t.x*i,this.y+=t.y*i,this.z+=t.z*i,this.w+=t.w*i,this}sub(t){return this.x-=t.x,this.y-=t.y,this.z-=t.z,this.w-=t.w,this}subScalar(t){return this.x-=t,this.y-=t,this.z-=t,this.w-=t,this}subVectors(t,i){return this.x=t.x-i.x,this.y=t.y-i.y,this.z=t.z-i.z,this.w=t.w-i.w,this}multiply(t){return this.x*=t.x,this.y*=t.y,this.z*=t.z,this.w*=t.w,this}multiplyScalar(t){return this.x*=t,this.y*=t,this.z*=t,this.w*=t,this}applyMatrix4(t){const i=this.x,s=this.y,e=this.z,r=this.w,n=t.elements;return this.x=n[0]*i+n[4]*s+n[8]*e+n[12]*r,this.y=n[1]*i+n[5]*s+n[9]*e+n[13]*r,this.z=n[2]*i+n[6]*s+n[10]*e+n[14]*r,this.w=n[3]*i+n[7]*s+n[11]*e+n[15]*r,this}divide(t){return this.x/=t.x,this.y/=t.y,this.z/=t.z,this.w/=t.w,this}divideScalar(t){return this.multiplyScalar(1/t)}setAxisAngleFromQuaternion(t){this.w=2*Math.acos(t.w);const i=Math.sqrt(1-t.w*t.w);return i<1e-4?(this.x=1,this.y=0,this.z=0):(this.x=t.x/i,this.y=t.y/i,this.z=t.z/i),this}setAxisAngleFromRotationMatrix(t){let i,s,e,r;const n=t.elements,a=n[0],o=n[4],h=n[8],l=n[1],u=n[5],c=n[9],d=n[2],p=n[6],y=n[10];if(Math.abs(o-l)<.01&&Math.abs(h-d)<.01&&Math.abs(c-p)<.01){if(Math.abs(o+l)<.1&&Math.abs(h+d)<.1&&Math.abs(c+p)<.1&&Math.abs(a+u+y-3)<.1)return this.set(1,0,0,0),this;i=Math.PI;const g=(a+1)/2,v=(u+1)/2,S=(y+1)/2,w=(o+l)/4,z=(h+d)/4,C=(c+p)/4;return g>v&&g>S?g<.01?(s=0,e=.707106781,r=.707106781):(s=Math.sqrt(g),e=w/s,r=z/s):v>S?v<.01?(s=.707106781,e=0,r=.707106781):(e=Math.sqrt(v),s=w/e,r=C/e):S<.01?(s=.707106781,e=.707106781,r=0):(r=Math.sqrt(S),s=z/r,e=C/r),this.set(s,e,r,i),this}let x=Math.sqrt((p-c)*(p-c)+(h-d)*(h-d)+(l-o)*(l-o));return Math.abs(x)<.001&&(x=1),this.x=(p-c)/x,this.y=(h-d)/x,this.z=(l-o)/x,this.w=Math.acos((a+u+y-1)/2),this}setFromMatrixPosition(t){const i=t.elements;return this.x=i[12],this.y=i[13],this.z=i[14],this.w=i[15],this}min(t){return this.x=Math.min(this.x,t.x),this.y=Math.min(this.y,t.y),this.z=Math.min(this.z,t.z),this.w=Math.min(this.w,t.w),this}max(t){return this.x=Math.max(this.x,t.x),this.y=Math.max(this.y,t.y),this.z=Math.max(this.z,t.z),this.w=Math.max(this.w,t.w),this}clamp(t,i){return this.x=T(this.x,t.x,i.x),this.y=T(this.y,t.y,i.y),this.z=T(this.z,t.z,i.z),this.w=T(this.w,t.w,i.w),this}clampScalar(t,i){return this.x=T(this.x,t,i),this.y=T(this.y,t,i),this.z=T(this.z,t,i),this.w=T(this.w,t,i),this}clampLength(t,i){const s=this.length();return this.divideScalar(s||1).multiplyScalar(T(s,t,i))}floor(){return this.x=Math.floor(this.x),this.y=Math.floor(this.y),this.z=Math.floor(this.z),this.w=Math.floor(this.w),this}ceil(){return this.x=Math.ceil(this.x),this.y=Math.ceil(this.y),this.z=Math.ceil(this.z),this.w=Math.ceil(this.w),this}round(){return this.x=Math.round(this.x),this.y=Math.round(this.y),this.z=Math.round(this.z),this.w=Math.round(this.w),this}roundToZero(){return this.x=Math.trunc(this.x),this.y=Math.trunc(this.y),this.z=Math.trunc(this.z),this.w=Math.trunc(this.w),this}negate(){return this.x=-this.x,this.y=-this.y,this.z=-this.z,this.w=-this.w,this}dot(t){return this.x*t.x+this.y*t.y+this.z*t.z+this.w*t.w}lengthSq(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w}length(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)}manhattanLength(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)}normalize(){return this.divideScalar(this.length()||1)}setLength(t){return this.normalize().multiplyScalar(t)}lerp(t,i){return this.x+=(t.x-this.x)*i,this.y+=(t.y-this.y)*i,this.z+=(t.z-this.z)*i,this.w+=(t.w-this.w)*i,this}lerpVectors(t,i,s){return this.x=t.x+(i.x-t.x)*s,this.y=t.y+(i.y-t.y)*s,this.z=t.z+(i.z-t.z)*s,this.w=t.w+(i.w-t.w)*s,this}equals(t){return t.x===this.x&&t.y===this.y&&t.z===this.z&&t.w===this.w}fromArray(t,i=0){return this.x=t[i],this.y=t[i+1],this.z=t[i+2],this.w=t[i+3],this}toArray(t=[],i=0){return t[i]=this.x,t[i+1]=this.y,t[i+2]=this.z,t[i+3]=this.w,t}fromBufferAttribute(t,i){return this.x=t.getX(i),this.y=t.getY(i),this.z=t.getZ(i),this.w=t.getW(i),this}random(){return this.x=Math.random(),this.y=Math.random(),this.z=Math.random(),this.w=Math.random(),this}*[Symbol.iterator](){yield this.x,yield this.y,yield this.z,yield this.w}}class us extends X{constructor(t=null,i=1,s=1,e=1){super(null),this.isDataArrayTexture=!0,this.image={data:t,width:i,height:s,depth:e},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1,this.layerUpdates=new Set}addLayerUpdate(t){this.layerUpdates.add(t)}clearLayerUpdates(){this.layerUpdates.clear()}}class cs extends X{constructor(t=null,i=1,s=1,e=1){super(null),this.isData3DTexture=!0,this.image={data:t,width:i,height:s,depth:e},this.magFilter=1003,this.minFilter=1003,this.wrapR=1001,this.generateMipmaps=!1,this.flipY=!1,this.unpackAlignment=1}}class kt{constructor(t=new m(1/0,1/0,1/0),i=new m(-1/0,-1/0,-1/0)){this.isBox3=!0,this.min=t,this.max=i}set(t,i){return this.min.copy(t),this.max.copy(i),this}setFromArray(t){this.makeEmpty();for(let i=0,s=t.length;i<s;i+=3)this.expandByPoint(Y.fromArray(t,i));return this}setFromBufferAttribute(t){this.makeEmpty();for(let i=0,s=t.count;i<s;i++)this.expandByPoint(Y.fromBufferAttribute(t,i));return this}setFromPoints(t){this.makeEmpty();for(let i=0,s=t.length;i<s;i++)this.expandByPoint(t[i]);return this}setFromCenterAndSize(t,i){const s=Y.copy(i).multiplyScalar(.5);return this.min.copy(t).sub(s),this.max.copy(t).add(s),this}setFromObject(t,i=!1){return this.makeEmpty(),this.expandByObject(t,i)}clone(){return new this.constructor().copy(this)}copy(t){return this.min.copy(t.min),this.max.copy(t.max),this}makeEmpty(){return this.min.x=this.min.y=this.min.z=1/0,this.max.x=this.max.y=this.max.z=-1/0,this}isEmpty(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z}getCenter(t){return this.isEmpty()?t.set(0,0,0):t.addVectors(this.min,this.max).multiplyScalar(.5)}getSize(t){return this.isEmpty()?t.set(0,0,0):t.subVectors(this.max,this.min)}expandByPoint(t){return this.min.min(t),this.max.max(t),this}expandByVector(t){return this.min.sub(t),this.max.add(t),this}expandByScalar(t){return this.min.addScalar(-t),this.max.addScalar(t),this}expandByObject(t,i=!1){t.updateWorldMatrix(!1,!1);const s=t.geometry;if(s!==void 0){const r=s.getAttribute("position");if(i===!0&&r!==void 0&&t.isInstancedMesh!==!0)for(let n=0,a=r.count;n<a;n++)t.isMesh===!0?t.getVertexPosition(n,Y):Y.fromBufferAttribute(r,n),Y.applyMatrix4(t.matrixWorld),this.expandByPoint(Y);else t.boundingBox!==void 0?(t.boundingBox===null&&t.computeBoundingBox(),Yt.copy(t.boundingBox)):(s.boundingBox===null&&s.computeBoundingBox(),Yt.copy(s.boundingBox)),Yt.applyMatrix4(t.matrixWorld),this.union(Yt)}const e=t.children;for(let r=0,n=e.length;r<n;r++)this.expandByObject(e[r],i);return this}containsPoint(t){return t.x>=this.min.x&&t.x<=this.max.x&&t.y>=this.min.y&&t.y<=this.max.y&&t.z>=this.min.z&&t.z<=this.max.z}containsBox(t){return this.min.x<=t.min.x&&t.max.x<=this.max.x&&this.min.y<=t.min.y&&t.max.y<=this.max.y&&this.min.z<=t.min.z&&t.max.z<=this.max.z}getParameter(t,i){return i.set((t.x-this.min.x)/(this.max.x-this.min.x),(t.y-this.min.y)/(this.max.y-this.min.y),(t.z-this.min.z)/(this.max.z-this.min.z))}intersectsBox(t){return t.max.x>=this.min.x&&t.min.x<=this.max.x&&t.max.y>=this.min.y&&t.min.y<=this.max.y&&t.max.z>=this.min.z&&t.min.z<=this.max.z}intersectsSphere(t){return this.clampPoint(t.center,Y),Y.distanceToSquared(t.center)<=t.radius*t.radius}intersectsPlane(t){let i,s;return t.normal.x>0?(i=t.normal.x*this.min.x,s=t.normal.x*this.max.x):(i=t.normal.x*this.max.x,s=t.normal.x*this.min.x),t.normal.y>0?(i+=t.normal.y*this.min.y,s+=t.normal.y*this.max.y):(i+=t.normal.y*this.max.y,s+=t.normal.y*this.min.y),t.normal.z>0?(i+=t.normal.z*this.min.z,s+=t.normal.z*this.max.z):(i+=t.normal.z*this.max.z,s+=t.normal.z*this.min.z),i<=-t.constant&&s>=-t.constant}intersectsTriangle(t){if(this.isEmpty())return!1;this.getCenter(Rt),Zt.subVectors(this.max,Rt),xt.subVectors(t.a,Rt),gt.subVectors(t.b,Rt),Mt.subVectors(t.c,Rt),ht.subVectors(gt,xt),ot.subVectors(Mt,gt),dt.subVectors(xt,Mt);let i=[0,-ht.z,ht.y,0,-ot.z,ot.y,0,-dt.z,dt.y,ht.z,0,-ht.x,ot.z,0,-ot.x,dt.z,0,-dt.x,-ht.y,ht.x,0,-ot.y,ot.x,0,-dt.y,dt.x,0];return!fi(i,xt,gt,Mt,Zt)||(i=[1,0,0,0,1,0,0,0,1],!fi(i,xt,gt,Mt,Zt))?!1:(Jt.crossVectors(ht,ot),i=[Jt.x,Jt.y,Jt.z],fi(i,xt,gt,Mt,Zt))}clampPoint(t,i){return i.copy(t).clamp(this.min,this.max)}distanceToPoint(t){return this.clampPoint(t,Y).distanceTo(t)}getBoundingSphere(t){return this.isEmpty()?t.makeEmpty():(this.getCenter(t.center),t.radius=this.getSize(Y).length()*.5),t}intersect(t){return this.min.max(t.min),this.max.min(t.max),this.isEmpty()&&this.makeEmpty(),this}union(t){return this.min.min(t.min),this.max.max(t.max),this}applyMatrix4(t){return this.isEmpty()?this:(K[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(t),K[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(t),K[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(t),K[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(t),K[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(t),K[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(t),K[6].set(this.max.x,this.max.y,this.min.z).applyMatrix4(t),K[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(t),this.setFromPoints(K),this)}translate(t){return this.min.add(t),this.max.add(t),this}equals(t){return t.min.equals(this.min)&&t.max.equals(this.max)}toJSON(){return{min:this.min.toArray(),max:this.max.toArray()}}fromJSON(t){return this.min.fromArray(t.min),this.max.fromArray(t.max),this}}const K=[new m,new m,new m,new m,new m,new m,new m,new m],Y=new m,Yt=new kt,xt=new m,gt=new m,Mt=new m,ht=new m,ot=new m,dt=new m,Rt=new m,Zt=new m,Jt=new m,pt=new m;function fi(f,t,i,s,e){for(let r=0,n=f.length-3;r<=n;r+=3){pt.fromArray(f,r);const a=e.x*Math.abs(pt.x)+e.y*Math.abs(pt.y)+e.z*Math.abs(pt.z),o=t.dot(pt),h=i.dot(pt),l=s.dot(pt);if(Math.max(-Math.max(o,h,l),Math.min(o,h,l))>a)return!1}return!0}const ds=new kt,Bt=new m,xi=new m;class Vt{constructor(t=new m,i=-1){this.isSphere=!0,this.center=t,this.radius=i}set(t,i){return this.center.copy(t),this.radius=i,this}setFromPoints(t,i){const s=this.center;i!==void 0?s.copy(i):ds.setFromPoints(t).getCenter(s);let e=0;for(let r=0,n=t.length;r<n;r++)e=Math.max(e,s.distanceToSquared(t[r]));return this.radius=Math.sqrt(e),this}copy(t){return this.center.copy(t.center),this.radius=t.radius,this}isEmpty(){return this.radius<0}makeEmpty(){return this.center.set(0,0,0),this.radius=-1,this}containsPoint(t){return t.distanceToSquared(this.center)<=this.radius*this.radius}distanceToPoint(t){return t.distanceTo(this.center)-this.radius}intersectsSphere(t){const i=this.radius+t.radius;return t.center.distanceToSquared(this.center)<=i*i}intersectsBox(t){return t.intersectsSphere(this)}intersectsPlane(t){return Math.abs(t.distanceToPoint(this.center))<=this.radius}clampPoint(t,i){const s=this.center.distanceToSquared(t);return i.copy(t),s>this.radius*this.radius&&(i.sub(this.center).normalize(),i.multiplyScalar(this.radius).add(this.center)),i}getBoundingBox(t){return this.isEmpty()?(t.makeEmpty(),t):(t.set(this.center,this.center),t.expandByScalar(this.radius),t)}applyMatrix4(t){return this.center.applyMatrix4(t),this.radius=this.radius*t.getMaxScaleOnAxis(),this}translate(t){return this.center.add(t),this}expandByPoint(t){if(this.isEmpty())return this.center.copy(t),this.radius=0,this;Bt.subVectors(t,this.center);const i=Bt.lengthSq();if(i>this.radius*this.radius){const s=Math.sqrt(i),e=(s-this.radius)*.5;this.center.addScaledVector(Bt,e/s),this.radius+=e}return this}union(t){return t.isEmpty()?this:this.isEmpty()?(this.copy(t),this):(this.center.equals(t.center)===!0?this.radius=Math.max(this.radius,t.radius):(xi.subVectors(t.center,this.center).setLength(t.radius),this.expandByPoint(Bt.copy(t.center).add(xi)),this.expandByPoint(Bt.copy(t.center).sub(xi))),this)}equals(t){return t.center.equals(this.center)&&t.radius===this.radius}clone(){return new this.constructor().copy(this)}toJSON(){return{radius:this.radius,center:this.center.toArray()}}fromJSON(t){return this.radius=t.radius,this.center.fromArray(t.center),this}}const tt=new m,gi=new m,Gt=new m,lt=new m,Mi=new m,Qt=new m,wi=new m;class ss{constructor(t=new m,i=new m(0,0,-1)){this.origin=t,this.direction=i}set(t,i){return this.origin.copy(t),this.direction.copy(i),this}copy(t){return this.origin.copy(t.origin),this.direction.copy(t.direction),this}at(t,i){return i.copy(this.origin).addScaledVector(this.direction,t)}lookAt(t){return this.direction.copy(t).sub(this.origin).normalize(),this}recast(t){return this.origin.copy(this.at(t,tt)),this}closestPointToPoint(t,i){i.subVectors(t,this.origin);const s=i.dot(this.direction);return s<0?i.copy(this.origin):i.copy(this.origin).addScaledVector(this.direction,s)}distanceToPoint(t){return Math.sqrt(this.distanceSqToPoint(t))}distanceSqToPoint(t){const i=tt.subVectors(t,this.origin).dot(this.direction);return i<0?this.origin.distanceToSquared(t):(tt.copy(this.origin).addScaledVector(this.direction,i),tt.distanceToSquared(t))}distanceSqToSegment(t,i,s,e){gi.copy(t).add(i).multiplyScalar(.5),Gt.copy(i).sub(t).normalize(),lt.copy(this.origin).sub(gi);const r=t.distanceTo(i)*.5,n=-this.direction.dot(Gt),a=lt.dot(this.direction),o=-lt.dot(Gt),h=lt.lengthSq(),l=Math.abs(1-n*n);let u,c,d,p;if(l>0)if(u=n*o-a,c=n*a-o,p=r*l,u>=0)if(c>=-p)if(c<=p){const y=1/l;u*=y,c*=y,d=u*(u+n*c+2*a)+c*(n*u+c+2*o)+h}else c=r,u=Math.max(0,-(n*c+a)),d=-u*u+c*(c+2*o)+h;else c=-r,u=Math.max(0,-(n*c+a)),d=-u*u+c*(c+2*o)+h;else c<=-p?(u=Math.max(0,-(-n*r+a)),c=u>0?-r:Math.min(Math.max(-r,-o),r),d=-u*u+c*(c+2*o)+h):c<=p?(u=0,c=Math.min(Math.max(-r,-o),r),d=c*(c+2*o)+h):(u=Math.max(0,-(n*r+a)),c=u>0?r:Math.min(Math.max(-r,-o),r),d=-u*u+c*(c+2*o)+h);else c=n>0?-r:r,u=Math.max(0,-(n*c+a)),d=-u*u+c*(c+2*o)+h;return s&&s.copy(this.origin).addScaledVector(this.direction,u),e&&e.copy(gi).addScaledVector(Gt,c),d}intersectSphere(t,i){tt.subVectors(t.center,this.origin);const s=tt.dot(this.direction),e=tt.dot(tt)-s*s,r=t.radius*t.radius;if(e>r)return null;const n=Math.sqrt(r-e),a=s-n,o=s+n;return o<0?null:a<0?this.at(o,i):this.at(a,i)}intersectsSphere(t){return t.radius<0?!1:this.distanceSqToPoint(t.center)<=t.radius*t.radius}distanceToPlane(t){const i=t.normal.dot(this.direction);if(i===0)return t.distanceToPoint(this.origin)===0?0:null;const s=-(this.origin.dot(t.normal)+t.constant)/i;return s>=0?s:null}intersectPlane(t,i){const s=this.distanceToPlane(t);return s===null?null:this.at(s,i)}intersectsPlane(t){const i=t.distanceToPoint(this.origin);return i===0||t.normal.dot(this.direction)*i<0}intersectBox(t,i){let s,e,r,n,a,o;const h=1/this.direction.x,l=1/this.direction.y,u=1/this.direction.z,c=this.origin;return h>=0?(s=(t.min.x-c.x)*h,e=(t.max.x-c.x)*h):(s=(t.max.x-c.x)*h,e=(t.min.x-c.x)*h),l>=0?(r=(t.min.y-c.y)*l,n=(t.max.y-c.y)*l):(r=(t.max.y-c.y)*l,n=(t.min.y-c.y)*l),s>n||r>e||((r>s||isNaN(s))&&(s=r),(n<e||isNaN(e))&&(e=n),u>=0?(a=(t.min.z-c.z)*u,o=(t.max.z-c.z)*u):(a=(t.max.z-c.z)*u,o=(t.min.z-c.z)*u),s>o||a>e)||((a>s||s!==s)&&(s=a),(o<e||e!==e)&&(e=o),e<0)?null:this.at(s>=0?s:e,i)}intersectsBox(t){return this.intersectBox(t,tt)!==null}intersectTriangle(t,i,s,e,r){Mi.subVectors(i,t),Qt.subVectors(s,t),wi.crossVectors(Mi,Qt);let n=this.direction.dot(wi),a;if(n>0){if(e)return null;a=1}else if(n<0)a=-1,n=-n;else return null;lt.subVectors(this.origin,t);const o=a*this.direction.dot(Qt.crossVectors(lt,Qt));if(o<0)return null;const h=a*this.direction.dot(Mi.cross(lt));if(h<0||o+h>n)return null;const l=-a*lt.dot(wi);return l<0?null:this.at(l/n,r)}applyMatrix4(t){return this.origin.applyMatrix4(t),this.direction.transformDirection(t),this}equals(t){return t.origin.equals(this.origin)&&t.direction.equals(this.direction)}clone(){return new this.constructor().copy(this)}}class k{constructor(t,i,s,e,r,n,a,o,h,l,u,c,d,p,y,x){k.prototype.isMatrix4=!0,this.elements=[1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1],t!==void 0&&this.set(t,i,s,e,r,n,a,o,h,l,u,c,d,p,y,x)}set(t,i,s,e,r,n,a,o,h,l,u,c,d,p,y,x){const g=this.elements;return g[0]=t,g[4]=i,g[8]=s,g[12]=e,g[1]=r,g[5]=n,g[9]=a,g[13]=o,g[2]=h,g[6]=l,g[10]=u,g[14]=c,g[3]=d,g[7]=p,g[11]=y,g[15]=x,this}identity(){return this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1),this}clone(){return new k().fromArray(this.elements)}copy(t){const i=this.elements,s=t.elements;return i[0]=s[0],i[1]=s[1],i[2]=s[2],i[3]=s[3],i[4]=s[4],i[5]=s[5],i[6]=s[6],i[7]=s[7],i[8]=s[8],i[9]=s[9],i[10]=s[10],i[11]=s[11],i[12]=s[12],i[13]=s[13],i[14]=s[14],i[15]=s[15],this}copyPosition(t){const i=this.elements,s=t.elements;return i[12]=s[12],i[13]=s[13],i[14]=s[14],this}setFromMatrix3(t){const i=t.elements;return this.set(i[0],i[3],i[6],0,i[1],i[4],i[7],0,i[2],i[5],i[8],0,0,0,0,1),this}extractBasis(t,i,s){return t.setFromMatrixColumn(this,0),i.setFromMatrixColumn(this,1),s.setFromMatrixColumn(this,2),this}makeBasis(t,i,s){return this.set(t.x,i.x,s.x,0,t.y,i.y,s.y,0,t.z,i.z,s.z,0,0,0,0,1),this}extractRotation(t){const i=this.elements,s=t.elements,e=1/wt.setFromMatrixColumn(t,0).length(),r=1/wt.setFromMatrixColumn(t,1).length(),n=1/wt.setFromMatrixColumn(t,2).length();return i[0]=s[0]*e,i[1]=s[1]*e,i[2]=s[2]*e,i[3]=0,i[4]=s[4]*r,i[5]=s[5]*r,i[6]=s[6]*r,i[7]=0,i[8]=s[8]*n,i[9]=s[9]*n,i[10]=s[10]*n,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromEuler(t){const i=this.elements,s=t.x,e=t.y,r=t.z,n=Math.cos(s),a=Math.sin(s),o=Math.cos(e),h=Math.sin(e),l=Math.cos(r),u=Math.sin(r);if(t.order==="XYZ"){const c=n*l,d=n*u,p=a*l,y=a*u;i[0]=o*l,i[4]=-o*u,i[8]=h,i[1]=d+p*h,i[5]=c-y*h,i[9]=-a*o,i[2]=y-c*h,i[6]=p+d*h,i[10]=n*o}else if(t.order==="YXZ"){const c=o*l,d=o*u,p=h*l,y=h*u;i[0]=c+y*a,i[4]=p*a-d,i[8]=n*h,i[1]=n*u,i[5]=n*l,i[9]=-a,i[2]=d*a-p,i[6]=y+c*a,i[10]=n*o}else if(t.order==="ZXY"){const c=o*l,d=o*u,p=h*l,y=h*u;i[0]=c-y*a,i[4]=-n*u,i[8]=p+d*a,i[1]=d+p*a,i[5]=n*l,i[9]=y-c*a,i[2]=-n*h,i[6]=a,i[10]=n*o}else if(t.order==="ZYX"){const c=n*l,d=n*u,p=a*l,y=a*u;i[0]=o*l,i[4]=p*h-d,i[8]=c*h+y,i[1]=o*u,i[5]=y*h+c,i[9]=d*h-p,i[2]=-h,i[6]=a*o,i[10]=n*o}else if(t.order==="YZX"){const c=n*o,d=n*h,p=a*o,y=a*h;i[0]=o*l,i[4]=y-c*u,i[8]=p*u+d,i[1]=u,i[5]=n*l,i[9]=-a*l,i[2]=-h*l,i[6]=d*u+p,i[10]=c-y*u}else if(t.order==="XZY"){const c=n*o,d=n*h,p=a*o,y=a*h;i[0]=o*l,i[4]=-u,i[8]=h*l,i[1]=c*u+y,i[5]=n*l,i[9]=d*u-p,i[2]=p*u-d,i[6]=a*l,i[10]=y*u+c}return i[3]=0,i[7]=0,i[11]=0,i[12]=0,i[13]=0,i[14]=0,i[15]=1,this}makeRotationFromQuaternion(t){return this.compose(ps,t,ms)}lookAt(t,i,s){const e=this.elements;return W.subVectors(t,i),W.lengthSq()===0&&(W.z=1),W.normalize(),ut.crossVectors(s,W),ut.lengthSq()===0&&(Math.abs(s.z)===1?W.x+=1e-4:W.z+=1e-4,W.normalize(),ut.crossVectors(s,W)),ut.normalize(),$t.crossVectors(W,ut),e[0]=ut.x,e[4]=$t.x,e[8]=W.x,e[1]=ut.y,e[5]=$t.y,e[9]=W.y,e[2]=ut.z,e[6]=$t.z,e[10]=W.z,this}multiply(t){return this.multiplyMatrices(this,t)}premultiply(t){return this.multiplyMatrices(t,this)}multiplyMatrices(t,i){const s=t.elements,e=i.elements,r=this.elements,n=s[0],a=s[4],o=s[8],h=s[12],l=s[1],u=s[5],c=s[9],d=s[13],p=s[2],y=s[6],x=s[10],g=s[14],v=s[3],S=s[7],w=s[11],z=s[15],C=e[0],_=e[4],A=e[8],F=e[12],I=e[1],D=e[5],nt=e[9],P=e[13],at=e[2],Ut=e[6],Lt=e[10],Wt=e[14],qt=e[3],Ht=e[7],Xt=e[11],jt=e[15];return r[0]=n*C+a*I+o*at+h*qt,r[4]=n*_+a*D+o*Ut+h*Ht,r[8]=n*A+a*nt+o*Lt+h*Xt,r[12]=n*F+a*P+o*Wt+h*jt,r[1]=l*C+u*I+c*at+d*qt,r[5]=l*_+u*D+c*Ut+d*Ht,r[9]=l*A+u*nt+c*Lt+d*Xt,r[13]=l*F+u*P+c*Wt+d*jt,r[2]=p*C+y*I+x*at+g*qt,r[6]=p*_+y*D+x*Ut+g*Ht,r[10]=p*A+y*nt+x*Lt+g*Xt,r[14]=p*F+y*P+x*Wt+g*jt,r[3]=v*C+S*I+w*at+z*qt,r[7]=v*_+S*D+w*Ut+z*Ht,r[11]=v*A+S*nt+w*Lt+z*Xt,r[15]=v*F+S*P+w*Wt+z*jt,this}multiplyScalar(t){const i=this.elements;return i[0]*=t,i[4]*=t,i[8]*=t,i[12]*=t,i[1]*=t,i[5]*=t,i[9]*=t,i[13]*=t,i[2]*=t,i[6]*=t,i[10]*=t,i[14]*=t,i[3]*=t,i[7]*=t,i[11]*=t,i[15]*=t,this}determinant(){const t=this.elements,i=t[0],s=t[4],e=t[8],r=t[12],n=t[1],a=t[5],o=t[9],h=t[13],l=t[2],u=t[6],c=t[10],d=t[14],p=t[3],y=t[7],x=t[11],g=t[15];return p*(+r*o*u-e*h*u-r*a*c+s*h*c+e*a*d-s*o*d)+y*(+i*o*d-i*h*c+r*n*c-e*n*d+e*h*l-r*o*l)+x*(+i*h*u-i*a*d-r*n*u+s*n*d+r*a*l-s*h*l)+g*(-e*a*l-i*o*u+i*a*c+e*n*u-s*n*c+s*o*l)}transpose(){const t=this.elements;let i;return i=t[1],t[1]=t[4],t[4]=i,i=t[2],t[2]=t[8],t[8]=i,i=t[6],t[6]=t[9],t[9]=i,i=t[3],t[3]=t[12],t[12]=i,i=t[7],t[7]=t[13],t[13]=i,i=t[11],t[11]=t[14],t[14]=i,this}setPosition(t,i,s){const e=this.elements;return t.isVector3?(e[12]=t.x,e[13]=t.y,e[14]=t.z):(e[12]=t,e[13]=i,e[14]=s),this}invert(){const t=this.elements,i=t[0],s=t[1],e=t[2],r=t[3],n=t[4],a=t[5],o=t[6],h=t[7],l=t[8],u=t[9],c=t[10],d=t[11],p=t[12],y=t[13],x=t[14],g=t[15],v=u*x*h-y*c*h+y*o*d-a*x*d-u*o*g+a*c*g,S=p*c*h-l*x*h-p*o*d+n*x*d+l*o*g-n*c*g,w=l*y*h-p*u*h+p*a*d-n*y*d-l*a*g+n*u*g,z=p*u*o-l*y*o-p*a*c+n*y*c+l*a*x-n*u*x,C=i*v+s*S+e*w+r*z;if(C===0)return this.set(0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0);const _=1/C;return t[0]=v*_,t[1]=(y*c*r-u*x*r-y*e*d+s*x*d+u*e*g-s*c*g)*_,t[2]=(a*x*r-y*o*r+y*e*h-s*x*h-a*e*g+s*o*g)*_,t[3]=(u*o*r-a*c*r-u*e*h+s*c*h+a*e*d-s*o*d)*_,t[4]=S*_,t[5]=(l*x*r-p*c*r+p*e*d-i*x*d-l*e*g+i*c*g)*_,t[6]=(p*o*r-n*x*r-p*e*h+i*x*h+n*e*g-i*o*g)*_,t[7]=(n*c*r-l*o*r+l*e*h-i*c*h-n*e*d+i*o*d)*_,t[8]=w*_,t[9]=(p*u*r-l*y*r-p*s*d+i*y*d+l*s*g-i*u*g)*_,t[10]=(n*y*r-p*a*r+p*s*h-i*y*h-n*s*g+i*a*g)*_,t[11]=(l*a*r-n*u*r-l*s*h+i*u*h+n*s*d-i*a*d)*_,t[12]=z*_,t[13]=(l*y*e-p*u*e+p*s*c-i*y*c-l*s*x+i*u*x)*_,t[14]=(p*a*e-n*y*e-p*s*o+i*y*o+n*s*x-i*a*x)*_,t[15]=(n*u*e-l*a*e+l*s*o-i*u*o-n*s*c+i*a*c)*_,this}scale(t){const i=this.elements,s=t.x,e=t.y,r=t.z;return i[0]*=s,i[4]*=e,i[8]*=r,i[1]*=s,i[5]*=e,i[9]*=r,i[2]*=s,i[6]*=e,i[10]*=r,i[3]*=s,i[7]*=e,i[11]*=r,this}getMaxScaleOnAxis(){const t=this.elements,i=t[0]*t[0]+t[1]*t[1]+t[2]*t[2],s=t[4]*t[4]+t[5]*t[5]+t[6]*t[6],e=t[8]*t[8]+t[9]*t[9]+t[10]*t[10];return Math.sqrt(Math.max(i,s,e))}makeTranslation(t,i,s){return t.isVector3?this.set(1,0,0,t.x,0,1,0,t.y,0,0,1,t.z,0,0,0,1):this.set(1,0,0,t,0,1,0,i,0,0,1,s,0,0,0,1),this}makeRotationX(t){const i=Math.cos(t),s=Math.sin(t);return this.set(1,0,0,0,0,i,-s,0,0,s,i,0,0,0,0,1),this}makeRotationY(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,0,s,0,0,1,0,0,-s,0,i,0,0,0,0,1),this}makeRotationZ(t){const i=Math.cos(t),s=Math.sin(t);return this.set(i,-s,0,0,s,i,0,0,0,0,1,0,0,0,0,1),this}makeRotationAxis(t,i){const s=Math.cos(i),e=Math.sin(i),r=1-s,n=t.x,a=t.y,o=t.z,h=r*n,l=r*a;return this.set(h*n+s,h*a-e*o,h*o+e*a,0,h*a+e*o,l*a+s,l*o-e*n,0,h*o-e*a,l*o+e*n,r*o*o+s,0,0,0,0,1),this}makeScale(t,i,s){return this.set(t,0,0,0,0,i,0,0,0,0,s,0,0,0,0,1),this}makeShear(t,i,s,e,r,n){return this.set(1,s,r,0,t,1,n,0,i,e,1,0,0,0,0,1),this}compose(t,i,s){const e=this.elements,r=i._x,n=i._y,a=i._z,o=i._w,h=r+r,l=n+n,u=a+a,c=r*h,d=r*l,p=r*u,y=n*l,x=n*u,g=a*u,v=o*h,S=o*l,w=o*u,z=s.x,C=s.y,_=s.z;return e[0]=(1-(y+g))*z,e[1]=(d+w)*z,e[2]=(p-S)*z,e[3]=0,e[4]=(d-w)*C,e[5]=(1-(c+g))*C,e[6]=(x+v)*C,e[7]=0,e[8]=(p+S)*_,e[9]=(x-v)*_,e[10]=(1-(c+y))*_,e[11]=0,e[12]=t.x,e[13]=t.y,e[14]=t.z,e[15]=1,this}decompose(t,i,s){const e=this.elements;let r=wt.set(e[0],e[1],e[2]).length();const n=wt.set(e[4],e[5],e[6]).length(),a=wt.set(e[8],e[9],e[10]).length();this.determinant()<0&&(r=-r),t.x=e[12],t.y=e[13],t.z=e[14],Z.copy(this);const o=1/r,h=1/n,l=1/a;return Z.elements[0]*=o,Z.elements[1]*=o,Z.elements[2]*=o,Z.elements[4]*=h,Z.elements[5]*=h,Z.elements[6]*=h,Z.elements[8]*=l,Z.elements[9]*=l,Z.elements[10]*=l,i.setFromRotationMatrix(Z),s.x=r,s.y=n,s.z=a,this}makePerspective(t,i,s,e,r,n,a=2e3,o=!1){const h=this.elements,l=2*r/(i-t),u=2*r/(s-e),c=(i+t)/(i-t),d=(s+e)/(s-e);let p,y;if(o)p=r/(n-r),y=n*r/(n-r);else if(a===2e3)p=-(n+r)/(n-r),y=-2*n*r/(n-r);else if(a===2001)p=-n/(n-r),y=-n*r/(n-r);else throw new Error("THREE.Matrix4.makePerspective(): Invalid coordinate system: "+a);return h[0]=l,h[4]=0,h[8]=c,h[12]=0,h[1]=0,h[5]=u,h[9]=d,h[13]=0,h[2]=0,h[6]=0,h[10]=p,h[14]=y,h[3]=0,h[7]=0,h[11]=-1,h[15]=0,this}makeOrthographic(t,i,s,e,r,n,a=2e3,o=!1){const h=this.elements,l=2/(i-t),u=2/(s-e),c=-(i+t)/(i-t),d=-(s+e)/(s-e);let p,y;if(o)p=1/(n-r),y=n/(n-r);else if(a===2e3)p=-2/(n-r),y=-(n+r)/(n-r);else if(a===2001)p=-1/(n-r),y=-r/(n-r);else throw new Error("THREE.Matrix4.makeOrthographic(): Invalid coordinate system: "+a);return h[0]=l,h[4]=0,h[8]=0,h[12]=c,h[1]=0,h[5]=u,h[9]=0,h[13]=d,h[2]=0,h[6]=0,h[10]=p,h[14]=y,h[3]=0,h[7]=0,h[11]=0,h[15]=1,this}equals(t){const i=this.elements,s=t.elements;for(let e=0;e<16;e++)if(i[e]!==s[e])return!1;return!0}fromArray(t,i=0){for(let s=0;s<16;s++)this.elements[s]=t[s+i];return this}toArray(t=[],i=0){const s=this.elements;return t[i]=s[0],t[i+1]=s[1],t[i+2]=s[2],t[i+3]=s[3],t[i+4]=s[4],t[i+5]=s[5],t[i+6]=s[6],t[i+7]=s[7],t[i+8]=s[8],t[i+9]=s[9],t[i+10]=s[10],t[i+11]=s[11],t[i+12]=s[12],t[i+13]=s[13],t[i+14]=s[14],t[i+15]=s[15],t}}const wt=new m,Z=new k,ps=new m(0,0,0),ms=new m(1,1,1),ut=new m,$t=new m,W=new m,Wi=new k,qi=new Pt;class Dt{constructor(t=0,i=0,s=0,e=Dt.DEFAULT_ORDER){this.isEuler=!0,this._x=t,this._y=i,this._z=s,this._order=e}get x(){return this._x}set x(t){this._x=t,this._onChangeCallback()}get y(){return this._y}set y(t){this._y=t,this._onChangeCallback()}get z(){return this._z}set z(t){this._z=t,this._onChangeCallback()}get order(){return this._order}set order(t){this._order=t,this._onChangeCallback()}set(t,i,s,e=this._order){return this._x=t,this._y=i,this._z=s,this._order=e,this._onChangeCallback(),this}clone(){return new this.constructor(this._x,this._y,this._z,this._order)}copy(t){return this._x=t._x,this._y=t._y,this._z=t._z,this._order=t._order,this._onChangeCallback(),this}setFromRotationMatrix(t,i=this._order,s=!0){const e=t.elements,r=e[0],n=e[4],a=e[8],o=e[1],h=e[5],l=e[9],u=e[2],c=e[6],d=e[10];switch(i){case"XYZ":this._y=Math.asin(T(a,-1,1)),Math.abs(a)<.9999999?(this._x=Math.atan2(-l,d),this._z=Math.atan2(-n,r)):(this._x=Math.atan2(c,h),this._z=0);break;case"YXZ":this._x=Math.asin(-T(l,-1,1)),Math.abs(l)<.9999999?(this._y=Math.atan2(a,d),this._z=Math.atan2(o,h)):(this._y=Math.atan2(-u,r),this._z=0);break;case"ZXY":this._x=Math.asin(T(c,-1,1)),Math.abs(c)<.9999999?(this._y=Math.atan2(-u,d),this._z=Math.atan2(-n,h)):(this._y=0,this._z=Math.atan2(o,r));break;case"ZYX":this._y=Math.asin(-T(u,-1,1)),Math.abs(u)<.9999999?(this._x=Math.atan2(c,d),this._z=Math.atan2(o,r)):(this._x=0,this._z=Math.atan2(-n,h));break;case"YZX":this._z=Math.asin(T(o,-1,1)),Math.abs(o)<.9999999?(this._x=Math.atan2(-l,h),this._y=Math.atan2(-u,r)):(this._x=0,this._y=Math.atan2(a,d));break;case"XZY":this._z=Math.asin(-T(n,-1,1)),Math.abs(n)<.9999999?(this._x=Math.atan2(c,h),this._y=Math.atan2(a,r)):(this._x=Math.atan2(-l,d),this._y=0);break;default:console.warn("THREE.Euler: .setFromRotationMatrix() encountered an unknown order: "+i)}return this._order=i,s===!0&&this._onChangeCallback(),this}setFromQuaternion(t,i,s){return Wi.makeRotationFromQuaternion(t),this.setFromRotationMatrix(Wi,i,s)}setFromVector3(t,i=this._order){return this.set(t.x,t.y,t.z,i)}reorder(t){return qi.setFromEuler(this),this.setFromQuaternion(qi,t)}equals(t){return t._x===this._x&&t._y===this._y&&t._z===this._z&&t._order===this._order}fromArray(t){return this._x=t[0],this._y=t[1],this._z=t[2],t[3]!==void 0&&(this._order=t[3]),this._onChangeCallback(),this}toArray(t=[],i=0){return t[i]=this._x,t[i+1]=this._y,t[i+2]=this._z,t[i+3]=this._order,t}_onChange(t){return this._onChangeCallback=t,this}_onChangeCallback(){}*[Symbol.iterator](){yield this._x,yield this._y,yield this._z,yield this._order}}Dt.DEFAULT_ORDER="XYZ";class ys{constructor(){this.mask=1}set(t){this.mask=(1<<t|0)>>>0}enable(t){this.mask|=1<<t|0}enableAll(){this.mask=-1}toggle(t){this.mask^=1<<t|0}disable(t){this.mask&=~(1<<t|0)}disableAll(){this.mask=0}test(t){return(this.mask&t.mask)!==0}isEnabled(t){return(this.mask&(1<<t|0))!==0}}let fs=0;const Hi=new m,bt=new Pt,it=new k,Kt=new m,Ot=new m,xs=new m,gs=new Pt,Xi=new m(1,0,0),ji=new m(0,1,0),Yi=new m(0,0,1),Zi={type:"added"},Ms={type:"removed"},vt={type:"childadded",child:null},bi={type:"childremoved",child:null};class $ extends li{constructor(){super(),this.isObject3D=!0,Object.defineProperty(this,"id",{value:fs++}),this.uuid=It(),this.name="",this.type="Object3D",this.parent=null,this.children=[],this.up=$.DEFAULT_UP.clone();const t=new m,i=new Dt,s=new Pt,e=new m(1,1,1);function r(){s.setFromEuler(i,!1)}function n(){i.setFromQuaternion(s,void 0,!1)}i._onChange(r),s._onChange(n),Object.defineProperties(this,{position:{configurable:!0,enumerable:!0,value:t},rotation:{configurable:!0,enumerable:!0,value:i},quaternion:{configurable:!0,enumerable:!0,value:s},scale:{configurable:!0,enumerable:!0,value:e},modelViewMatrix:{value:new k},normalMatrix:{value:new b}}),this.matrix=new k,this.matrixWorld=new k,this.matrixAutoUpdate=$.DEFAULT_MATRIX_AUTO_UPDATE,this.matrixWorldAutoUpdate=$.DEFAULT_MATRIX_WORLD_AUTO_UPDATE,this.matrixWorldNeedsUpdate=!1,this.layers=new ys,this.visible=!0,this.castShadow=!1,this.receiveShadow=!1,this.frustumCulled=!0,this.renderOrder=0,this.animations=[],this.customDepthMaterial=void 0,this.customDistanceMaterial=void 0,this.userData={}}onBeforeShadow(){}onAfterShadow(){}onBeforeRender(){}onAfterRender(){}applyMatrix4(t){this.matrixAutoUpdate&&this.updateMatrix(),this.matrix.premultiply(t),this.matrix.decompose(this.position,this.quaternion,this.scale)}applyQuaternion(t){return this.quaternion.premultiply(t),this}setRotationFromAxisAngle(t,i){this.quaternion.setFromAxisAngle(t,i)}setRotationFromEuler(t){this.quaternion.setFromEuler(t,!0)}setRotationFromMatrix(t){this.quaternion.setFromRotationMatrix(t)}setRotationFromQuaternion(t){this.quaternion.copy(t)}rotateOnAxis(t,i){return bt.setFromAxisAngle(t,i),this.quaternion.multiply(bt),this}rotateOnWorldAxis(t,i){return bt.setFromAxisAngle(t,i),this.quaternion.premultiply(bt),this}rotateX(t){return this.rotateOnAxis(Xi,t)}rotateY(t){return this.rotateOnAxis(ji,t)}rotateZ(t){return this.rotateOnAxis(Yi,t)}translateOnAxis(t,i){return Hi.copy(t).applyQuaternion(this.quaternion),this.position.add(Hi.multiplyScalar(i)),this}translateX(t){return this.translateOnAxis(Xi,t)}translateY(t){return this.translateOnAxis(ji,t)}translateZ(t){return this.translateOnAxis(Yi,t)}localToWorld(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(this.matrixWorld)}worldToLocal(t){return this.updateWorldMatrix(!0,!1),t.applyMatrix4(it.copy(this.matrixWorld).invert())}lookAt(t,i,s){t.isVector3?Kt.copy(t):Kt.set(t,i,s);const e=this.parent;this.updateWorldMatrix(!0,!1),Ot.setFromMatrixPosition(this.matrixWorld),this.isCamera||this.isLight?it.lookAt(Ot,Kt,this.up):it.lookAt(Kt,Ot,this.up),this.quaternion.setFromRotationMatrix(it),e&&(it.extractRotation(e.matrixWorld),bt.setFromRotationMatrix(it),this.quaternion.premultiply(bt.invert()))}add(t){if(arguments.length>1){for(let i=0;i<arguments.length;i++)this.add(arguments[i]);return this}return t===this?(console.error("THREE.Object3D.add: object can't be added as a child of itself.",t),this):(t&&t.isObject3D?(t.removeFromParent(),t.parent=this,this.children.push(t),t.dispatchEvent(Zi),vt.child=t,this.dispatchEvent(vt),vt.child=null):console.error("THREE.Object3D.add: object not an instance of THREE.Object3D.",t),this)}remove(t){if(arguments.length>1){for(let s=0;s<arguments.length;s++)this.remove(arguments[s]);return this}const i=this.children.indexOf(t);return i!==-1&&(t.parent=null,this.children.splice(i,1),t.dispatchEvent(Ms),bi.child=t,this.dispatchEvent(bi),bi.child=null),this}removeFromParent(){const t=this.parent;return t!==null&&t.remove(this),this}clear(){return this.remove(...this.children)}attach(t){return this.updateWorldMatrix(!0,!1),it.copy(this.matrixWorld).invert(),t.parent!==null&&(t.parent.updateWorldMatrix(!0,!1),it.multiply(t.parent.matrixWorld)),t.applyMatrix4(it),t.removeFromParent(),t.parent=this,this.children.push(t),t.updateWorldMatrix(!1,!0),t.dispatchEvent(Zi),vt.child=t,this.dispatchEvent(vt),vt.child=null,this}getObjectById(t){return this.getObjectByProperty("id",t)}getObjectByName(t){return this.getObjectByProperty("name",t)}getObjectByProperty(t,i){if(this[t]===i)return this;for(let s=0,e=this.children.length;s<e;s++){const r=this.children[s].getObjectByProperty(t,i);if(r!==void 0)return r}}getObjectsByProperty(t,i,s=[]){this[t]===i&&s.push(this);const e=this.children;for(let r=0,n=e.length;r<n;r++)e[r].getObjectsByProperty(t,i,s);return s}getWorldPosition(t){return this.updateWorldMatrix(!0,!1),t.setFromMatrixPosition(this.matrixWorld)}getWorldQuaternion(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ot,t,xs),t}getWorldScale(t){return this.updateWorldMatrix(!0,!1),this.matrixWorld.decompose(Ot,gs,t),t}getWorldDirection(t){this.updateWorldMatrix(!0,!1);const i=this.matrixWorld.elements;return t.set(i[8],i[9],i[10]).normalize()}raycast(){}traverse(t){t(this);const i=this.children;for(let s=0,e=i.length;s<e;s++)i[s].traverse(t)}traverseVisible(t){if(this.visible===!1)return;t(this);const i=this.children;for(let s=0,e=i.length;s<e;s++)i[s].traverseVisible(t)}traverseAncestors(t){const i=this.parent;i!==null&&(t(i),i.traverseAncestors(t))}updateMatrix(){this.matrix.compose(this.position,this.quaternion,this.scale),this.matrixWorldNeedsUpdate=!0}updateMatrixWorld(t){this.matrixAutoUpdate&&this.updateMatrix(),(this.matrixWorldNeedsUpdate||t)&&(this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),this.matrixWorldNeedsUpdate=!1,t=!0);const i=this.children;for(let s=0,e=i.length;s<e;s++)i[s].updateMatrixWorld(t)}updateWorldMatrix(t,i){const s=this.parent;if(t===!0&&s!==null&&s.updateWorldMatrix(!0,!1),this.matrixAutoUpdate&&this.updateMatrix(),this.matrixWorldAutoUpdate===!0&&(this.parent===null?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix)),i===!0){const e=this.children;for(let r=0,n=e.length;r<n;r++)e[r].updateWorldMatrix(!1,!0)}}toJSON(t){const i=t===void 0||typeof t=="string",s={};i&&(t={geometries:{},materials:{},textures:{},images:{},shapes:{},skeletons:{},animations:{},nodes:{}},s.metadata={version:4.7,type:"Object",generator:"Object3D.toJSON"});const e={};e.uuid=this.uuid,e.type=this.type,this.name!==""&&(e.name=this.name),this.castShadow===!0&&(e.castShadow=!0),this.receiveShadow===!0&&(e.receiveShadow=!0),this.visible===!1&&(e.visible=!1),this.frustumCulled===!1&&(e.frustumCulled=!1),this.renderOrder!==0&&(e.renderOrder=this.renderOrder),Object.keys(this.userData).length>0&&(e.userData=this.userData),e.layers=this.layers.mask,e.matrix=this.matrix.toArray(),e.up=this.up.toArray(),this.matrixAutoUpdate===!1&&(e.matrixAutoUpdate=!1),this.isInstancedMesh&&(e.type="InstancedMesh",e.count=this.count,e.instanceMatrix=this.instanceMatrix.toJSON(),this.instanceColor!==null&&(e.instanceColor=this.instanceColor.toJSON())),this.isBatchedMesh&&(e.type="BatchedMesh",e.perObjectFrustumCulled=this.perObjectFrustumCulled,e.sortObjects=this.sortObjects,e.drawRanges=this._drawRanges,e.reservedRanges=this._reservedRanges,e.geometryInfo=this._geometryInfo.map(a=>({...a,boundingBox:a.boundingBox?a.boundingBox.toJSON():void 0,boundingSphere:a.boundingSphere?a.boundingSphere.toJSON():void 0})),e.instanceInfo=this._instanceInfo.map(a=>({...a})),e.availableInstanceIds=this._availableInstanceIds.slice(),e.availableGeometryIds=this._availableGeometryIds.slice(),e.nextIndexStart=this._nextIndexStart,e.nextVertexStart=this._nextVertexStart,e.geometryCount=this._geometryCount,e.maxInstanceCount=this._maxInstanceCount,e.maxVertexCount=this._maxVertexCount,e.maxIndexCount=this._maxIndexCount,e.geometryInitialized=this._geometryInitialized,e.matricesTexture=this._matricesTexture.toJSON(t),e.indirectTexture=this._indirectTexture.toJSON(t),this._colorsTexture!==null&&(e.colorsTexture=this._colorsTexture.toJSON(t)),this.boundingSphere!==null&&(e.boundingSphere=this.boundingSphere.toJSON()),this.boundingBox!==null&&(e.boundingBox=this.boundingBox.toJSON()));function r(a,o){return a[o.uuid]===void 0&&(a[o.uuid]=o.toJSON(t)),o.uuid}if(this.isScene)this.background&&(this.background.isColor?e.background=this.background.toJSON():this.background.isTexture&&(e.background=this.background.toJSON(t).uuid)),this.environment&&this.environment.isTexture&&this.environment.isRenderTargetTexture!==!0&&(e.environment=this.environment.toJSON(t).uuid);else if(this.isMesh||this.isLine||this.isPoints){e.geometry=r(t.geometries,this.geometry);const a=this.geometry.parameters;if(a!==void 0&&a.shapes!==void 0){const o=a.shapes;if(Array.isArray(o))for(let h=0,l=o.length;h<l;h++){const u=o[h];r(t.shapes,u)}else r(t.shapes,o)}}if(this.isSkinnedMesh&&(e.bindMode=this.bindMode,e.bindMatrix=this.bindMatrix.toArray(),this.skeleton!==void 0&&(r(t.skeletons,this.skeleton),e.skeleton=this.skeleton.uuid)),this.material!==void 0)if(Array.isArray(this.material)){const a=[];for(let o=0,h=this.material.length;o<h;o++)a.push(r(t.materials,this.material[o]));e.material=a}else e.material=r(t.materials,this.material);if(this.children.length>0){e.children=[];for(let a=0;a<this.children.length;a++)e.children.push(this.children[a].toJSON(t).object)}if(this.animations.length>0){e.animations=[];for(let a=0;a<this.animations.length;a++){const o=this.animations[a];e.animations.push(r(t.animations,o))}}if(i){const a=n(t.geometries),o=n(t.materials),h=n(t.textures),l=n(t.images),u=n(t.shapes),c=n(t.skeletons),d=n(t.animations),p=n(t.nodes);a.length>0&&(s.geometries=a),o.length>0&&(s.materials=o),h.length>0&&(s.textures=h),l.length>0&&(s.images=l),u.length>0&&(s.shapes=u),c.length>0&&(s.skeletons=c),d.length>0&&(s.animations=d),p.length>0&&(s.nodes=p)}return s.object=e,s;function n(a){const o=[];for(const h in a){const l=a[h];delete l.metadata,o.push(l)}return o}}clone(t){return new this.constructor().copy(this,t)}copy(t,i=!0){if(this.name=t.name,this.up.copy(t.up),this.position.copy(t.position),this.rotation.order=t.rotation.order,this.quaternion.copy(t.quaternion),this.scale.copy(t.scale),this.matrix.copy(t.matrix),this.matrixWorld.copy(t.matrixWorld),this.matrixAutoUpdate=t.matrixAutoUpdate,this.matrixWorldAutoUpdate=t.matrixWorldAutoUpdate,this.matrixWorldNeedsUpdate=t.matrixWorldNeedsUpdate,this.layers.mask=t.layers.mask,this.visible=t.visible,this.castShadow=t.castShadow,this.receiveShadow=t.receiveShadow,this.frustumCulled=t.frustumCulled,this.renderOrder=t.renderOrder,this.animations=t.animations.slice(),this.userData=JSON.parse(JSON.stringify(t.userData)),i===!0)for(let s=0;s<t.children.length;s++){const e=t.children[s];this.add(e.clone())}return this}}$.DEFAULT_UP=new m(0,1,0);$.DEFAULT_MATRIX_AUTO_UPDATE=!0;$.DEFAULT_MATRIX_WORLD_AUTO_UPDATE=!0;const J=new m,st=new m,vi=new m,et=new m,_t=new m,St=new m,Ji=new m,_i=new m,Si=new m,zi=new m,Ti=new Nt,Ai=new Nt,Ci=new Nt;class Q{constructor(t=new m,i=new m,s=new m){this.a=t,this.b=i,this.c=s}static getNormal(t,i,s,e){e.subVectors(s,i),J.subVectors(t,i),e.cross(J);const r=e.lengthSq();return r>0?e.multiplyScalar(1/Math.sqrt(r)):e.set(0,0,0)}static getBarycoord(t,i,s,e,r){J.subVectors(e,i),st.subVectors(s,i),vi.subVectors(t,i);const n=J.dot(J),a=J.dot(st),o=J.dot(vi),h=st.dot(st),l=st.dot(vi),u=n*h-a*a;if(u===0)return r.set(0,0,0),null;const c=1/u,d=(h*o-a*l)*c,p=(n*l-a*o)*c;return r.set(1-d-p,p,d)}static containsPoint(t,i,s,e){return this.getBarycoord(t,i,s,e,et)===null?!1:et.x>=0&&et.y>=0&&et.x+et.y<=1}static getInterpolation(t,i,s,e,r,n,a,o){return this.getBarycoord(t,i,s,e,et)===null?(o.x=0,o.y=0,"z"in o&&(o.z=0),"w"in o&&(o.w=0),null):(o.setScalar(0),o.addScaledVector(r,et.x),o.addScaledVector(n,et.y),o.addScaledVector(a,et.z),o)}static getInterpolatedAttribute(t,i,s,e,r,n){return Ti.setScalar(0),Ai.setScalar(0),Ci.setScalar(0),Ti.fromBufferAttribute(t,i),Ai.fromBufferAttribute(t,s),Ci.fromBufferAttribute(t,e),n.setScalar(0),n.addScaledVector(Ti,r.x),n.addScaledVector(Ai,r.y),n.addScaledVector(Ci,r.z),n}static isFrontFacing(t,i,s,e){return J.subVectors(s,i),st.subVectors(t,i),J.cross(st).dot(e)<0}set(t,i,s){return this.a.copy(t),this.b.copy(i),this.c.copy(s),this}setFromPointsAndIndices(t,i,s,e){return this.a.copy(t[i]),this.b.copy(t[s]),this.c.copy(t[e]),this}setFromAttributeAndIndices(t,i,s,e){return this.a.fromBufferAttribute(t,i),this.b.fromBufferAttribute(t,s),this.c.fromBufferAttribute(t,e),this}clone(){return new this.constructor().copy(this)}copy(t){return this.a.copy(t.a),this.b.copy(t.b),this.c.copy(t.c),this}getArea(){return J.subVectors(this.c,this.b),st.subVectors(this.a,this.b),J.cross(st).length()*.5}getMidpoint(t){return t.addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)}getNormal(t){return Q.getNormal(this.a,this.b,this.c,t)}getPlane(t){return t.setFromCoplanarPoints(this.a,this.b,this.c)}getBarycoord(t,i){return Q.getBarycoord(t,this.a,this.b,this.c,i)}getInterpolation(t,i,s,e,r){return Q.getInterpolation(t,this.a,this.b,this.c,i,s,e,r)}containsPoint(t){return Q.containsPoint(t,this.a,this.b,this.c)}isFrontFacing(t){return Q.isFrontFacing(this.a,this.b,this.c,t)}intersectsBox(t){return t.intersectsTriangle(this)}closestPointToPoint(t,i){const s=this.a,e=this.b,r=this.c;let n,a;_t.subVectors(e,s),St.subVectors(r,s),_i.subVectors(t,s);const o=_t.dot(_i),h=St.dot(_i);if(o<=0&&h<=0)return i.copy(s);Si.subVectors(t,e);const l=_t.dot(Si),u=St.dot(Si);if(l>=0&&u<=l)return i.copy(e);const c=o*u-l*h;if(c<=0&&o>=0&&l<=0)return n=o/(o-l),i.copy(s).addScaledVector(_t,n);zi.subVectors(t,r);const d=_t.dot(zi),p=St.dot(zi);if(p>=0&&d<=p)return i.copy(r);const y=d*h-o*p;if(y<=0&&h>=0&&p<=0)return a=h/(h-p),i.copy(s).addScaledVector(St,a);const x=l*p-d*u;if(x<=0&&u-l>=0&&d-p>=0)return Ji.subVectors(r,e),a=(u-l)/(u-l+(d-p)),i.copy(e).addScaledVector(Ji,a);const g=1/(x+y+c);return n=y*g,a=c*g,i.copy(s).addScaledVector(_t,n).addScaledVector(St,a)}equals(t){return t.a.equals(this.a)&&t.b.equals(this.b)&&t.c.equals(this.c)}}const es={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074},ct={h:0,s:0,l:0},ti={h:0,s:0,l:0};function ki(f,t,i){return i<0&&(i+=1),i>1&&(i-=1),i<1/6?f+(t-f)*6*i:i<1/2?t:i<2/3?f+(t-f)*6*(2/3-i):f}class O{constructor(t,i,s){return this.isColor=!0,this.r=1,this.g=1,this.b=1,this.set(t,i,s)}set(t,i,s){if(i===void 0&&s===void 0){const e=t;e&&e.isColor?this.copy(e):typeof e=="number"?this.setHex(e):typeof e=="string"&&this.setStyle(e)}else this.setRGB(t,i,s);return this}setScalar(t){return this.r=t,this.g=t,this.b=t,this}setHex(t,i=G){return t=Math.floor(t),this.r=(t>>16&255)/255,this.g=(t>>8&255)/255,this.b=(t&255)/255,j.colorSpaceToWorking(this,i),this}setRGB(t,i,s,e=j.workingColorSpace){return this.r=t,this.g=i,this.b=s,j.colorSpaceToWorking(this,e),this}setHSL(t,i,s,e=j.workingColorSpace){if(t=rs(t,1),i=T(i,0,1),s=T(s,0,1),i===0)this.r=this.g=this.b=s;else{const r=s<=.5?s*(1+i):s+i-s*i,n=2*s-r;this.r=ki(n,r,t+1/3),this.g=ki(n,r,t),this.b=ki(n,r,t-1/3)}return j.colorSpaceToWorking(this,e),this}setStyle(t,i=G){function s(r){r!==void 0&&parseFloat(r)<1&&console.warn("THREE.Color: Alpha component of "+t+" will be ignored.")}let e;if(e=/^(\w+)\(([^\)]*)\)/.exec(t)){let r;const n=e[1],a=e[2];switch(n){case"rgb":case"rgba":if(r=/^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(r[4]),this.setRGB(Math.min(255,parseInt(r[1],10))/255,Math.min(255,parseInt(r[2],10))/255,Math.min(255,parseInt(r[3],10))/255,i);if(r=/^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(r[4]),this.setRGB(Math.min(100,parseInt(r[1],10))/100,Math.min(100,parseInt(r[2],10))/100,Math.min(100,parseInt(r[3],10))/100,i);break;case"hsl":case"hsla":if(r=/^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec(a))return s(r[4]),this.setHSL(parseFloat(r[1])/360,parseFloat(r[2])/100,parseFloat(r[3])/100,i);break;default:console.warn("THREE.Color: Unknown color model "+t)}}else if(e=/^\#([A-Fa-f\d]+)$/.exec(t)){const r=e[1],n=r.length;if(n===3)return this.setRGB(parseInt(r.charAt(0),16)/15,parseInt(r.charAt(1),16)/15,parseInt(r.charAt(2),16)/15,i);if(n===6)return this.setHex(parseInt(r,16),i);console.warn("THREE.Color: Invalid hex color "+t)}else if(t&&t.length>0)return this.setColorName(t,i);return this}setColorName(t,i=G){const s=es[t.toLowerCase()];return s!==void 0?this.setHex(s,i):console.warn("THREE.Color: Unknown color "+t),this}clone(){return new this.constructor(this.r,this.g,this.b)}copy(t){return this.r=t.r,this.g=t.g,this.b=t.b,this}copySRGBToLinear(t){return this.r=rt(t.r),this.g=rt(t.g),this.b=rt(t.b),this}copyLinearToSRGB(t){return this.r=At(t.r),this.g=At(t.g),this.b=At(t.b),this}convertSRGBToLinear(){return this.copySRGBToLinear(this),this}convertLinearToSRGB(){return this.copyLinearToSRGB(this),this}getHex(t=G){return j.workingToColorSpace(V.copy(this),t),Math.round(T(V.r*255,0,255))*65536+Math.round(T(V.g*255,0,255))*256+Math.round(T(V.b*255,0,255))}getHexString(t=G){return("000000"+this.getHex(t).toString(16)).slice(-6)}getHSL(t,i=j.workingColorSpace){j.workingToColorSpace(V.copy(this),i);const s=V.r,e=V.g,r=V.b,n=Math.max(s,e,r),a=Math.min(s,e,r);let o,h;const l=(a+n)/2;if(a===n)o=0,h=0;else{const u=n-a;switch(h=l<=.5?u/(n+a):u/(2-n-a),n){case s:o=(e-r)/u+(e<r?6:0);break;case e:o=(r-s)/u+2;break;case r:o=(s-e)/u+4;break}o/=6}return t.h=o,t.s=h,t.l=l,t}getRGB(t,i=j.workingColorSpace){return j.workingToColorSpace(V.copy(this),i),t.r=V.r,t.g=V.g,t.b=V.b,t}getStyle(t=G){j.workingToColorSpace(V.copy(this),t);const i=V.r,s=V.g,e=V.b;return t!==G?`color(${t} ${i.toFixed(3)} ${s.toFixed(3)} ${e.toFixed(3)})`:`rgb(${Math.round(i*255)},${Math.round(s*255)},${Math.round(e*255)})`}offsetHSL(t,i,s){return this.getHSL(ct),this.setHSL(ct.h+t,ct.s+i,ct.l+s)}add(t){return this.r+=t.r,this.g+=t.g,this.b+=t.b,this}addColors(t,i){return this.r=t.r+i.r,this.g=t.g+i.g,this.b=t.b+i.b,this}addScalar(t){return this.r+=t,this.g+=t,this.b+=t,this}sub(t){return this.r=Math.max(0,this.r-t.r),this.g=Math.max(0,this.g-t.g),this.b=Math.max(0,this.b-t.b),this}multiply(t){return this.r*=t.r,this.g*=t.g,this.b*=t.b,this}multiplyScalar(t){return this.r*=t,this.g*=t,this.b*=t,this}lerp(t,i){return this.r+=(t.r-this.r)*i,this.g+=(t.g-this.g)*i,this.b+=(t.b-this.b)*i,this}lerpColors(t,i,s){return this.r=t.r+(i.r-t.r)*s,this.g=t.g+(i.g-t.g)*s,this.b=t.b+(i.b-t.b)*s,this}lerpHSL(t,i){this.getHSL(ct),t.getHSL(ti);const s=ci(ct.h,ti.h,i),e=ci(ct.s,ti.s,i),r=ci(ct.l,ti.l,i);return this.setHSL(s,e,r),this}setFromVector3(t){return this.r=t.x,this.g=t.y,this.b=t.z,this}applyMatrix3(t){const i=this.r,s=this.g,e=this.b,r=t.elements;return this.r=r[0]*i+r[3]*s+r[6]*e,this.g=r[1]*i+r[4]*s+r[7]*e,this.b=r[2]*i+r[5]*s+r[8]*e,this}equals(t){return t.r===this.r&&t.g===this.g&&t.b===this.b}fromArray(t,i=0){return this.r=t[i],this.g=t[i+1],this.b=t[i+2],this}toArray(t=[],i=0){return t[i]=this.r,t[i+1]=this.g,t[i+2]=this.b,t}fromBufferAttribute(t,i){return this.r=t.getX(i),this.g=t.getY(i),this.b=t.getZ(i),this}toJSON(){return this.getHex()}*[Symbol.iterator](){yield this.r,yield this.g,yield this.b}}const V=new O;O.NAMES=es;let ws=0;class bs extends li{constructor(){super(),this.isMaterial=!0,Object.defineProperty(this,"id",{value:ws++}),this.uuid=It(),this.name="",this.type="Material",this.blending=1,this.side=0,this.vertexColors=!1,this.opacity=1,this.transparent=!1,this.alphaHash=!1,this.blendSrc=204,this.blendDst=205,this.blendEquation=100,this.blendSrcAlpha=null,this.blendDstAlpha=null,this.blendEquationAlpha=null,this.blendColor=new O(0,0,0),this.blendAlpha=0,this.depthFunc=3,this.depthTest=!0,this.depthWrite=!0,this.stencilWriteMask=255,this.stencilFunc=519,this.stencilRef=0,this.stencilFuncMask=255,this.stencilFail=7680,this.stencilZFail=7680,this.stencilZPass=7680,this.stencilWrite=!1,this.clippingPlanes=null,this.clipIntersection=!1,this.clipShadows=!1,this.shadowSide=null,this.colorWrite=!0,this.precision=null,this.polygonOffset=!1,this.polygonOffsetFactor=0,this.polygonOffsetUnits=0,this.dithering=!1,this.alphaToCoverage=!1,this.premultipliedAlpha=!1,this.forceSinglePass=!1,this.allowOverride=!0,this.visible=!0,this.toneMapped=!0,this.userData={},this.version=0,this._alphaTest=0}get alphaTest(){return this._alphaTest}set alphaTest(t){this._alphaTest>0!=t>0&&this.version++,this._alphaTest=t}onBeforeRender(){}onBeforeCompile(){}customProgramCacheKey(){return this.onBeforeCompile.toString()}setValues(t){if(t!==void 0)for(const i in t){const s=t[i];if(s===void 0){console.warn(`THREE.Material: parameter '${i}' has value of undefined.`);continue}const e=this[i];if(e===void 0){console.warn(`THREE.Material: '${i}' is not a property of THREE.${this.type}.`);continue}e&&e.isColor?e.set(s):e&&e.isVector3&&s&&s.isVector3?e.copy(s):this[i]=s}}toJSON(t){const i=t===void 0||typeof t=="string";i&&(t={textures:{},images:{}});const s={metadata:{version:4.7,type:"Material",generator:"Material.toJSON"}};s.uuid=this.uuid,s.type=this.type,this.name!==""&&(s.name=this.name),this.color&&this.color.isColor&&(s.color=this.color.getHex()),this.roughness!==void 0&&(s.roughness=this.roughness),this.metalness!==void 0&&(s.metalness=this.metalness),this.sheen!==void 0&&(s.sheen=this.sheen),this.sheenColor&&this.sheenColor.isColor&&(s.sheenColor=this.sheenColor.getHex()),this.sheenRoughness!==void 0&&(s.sheenRoughness=this.sheenRoughness),this.emissive&&this.emissive.isColor&&(s.emissive=this.emissive.getHex()),this.emissiveIntensity!==void 0&&this.emissiveIntensity!==1&&(s.emissiveIntensity=this.emissiveIntensity),this.specular&&this.specular.isColor&&(s.specular=this.specular.getHex()),this.specularIntensity!==void 0&&(s.specularIntensity=this.specularIntensity),this.specularColor&&this.specularColor.isColor&&(s.specularColor=this.specularColor.getHex()),this.shininess!==void 0&&(s.shininess=this.shininess),this.clearcoat!==void 0&&(s.clearcoat=this.clearcoat),this.clearcoatRoughness!==void 0&&(s.clearcoatRoughness=this.clearcoatRoughness),this.clearcoatMap&&this.clearcoatMap.isTexture&&(s.clearcoatMap=this.clearcoatMap.toJSON(t).uuid),this.clearcoatRoughnessMap&&this.clearcoatRoughnessMap.isTexture&&(s.clearcoatRoughnessMap=this.clearcoatRoughnessMap.toJSON(t).uuid),this.clearcoatNormalMap&&this.clearcoatNormalMap.isTexture&&(s.clearcoatNormalMap=this.clearcoatNormalMap.toJSON(t).uuid,s.clearcoatNormalScale=this.clearcoatNormalScale.toArray()),this.dispersion!==void 0&&(s.dispersion=this.dispersion),this.iridescence!==void 0&&(s.iridescence=this.iridescence),this.iridescenceIOR!==void 0&&(s.iridescenceIOR=this.iridescenceIOR),this.iridescenceThicknessRange!==void 0&&(s.iridescenceThicknessRange=this.iridescenceThicknessRange),this.iridescenceMap&&this.iridescenceMap.isTexture&&(s.iridescenceMap=this.iridescenceMap.toJSON(t).uuid),this.iridescenceThicknessMap&&this.iridescenceThicknessMap.isTexture&&(s.iridescenceThicknessMap=this.iridescenceThicknessMap.toJSON(t).uuid),this.anisotropy!==void 0&&(s.anisotropy=this.anisotropy),this.anisotropyRotation!==void 0&&(s.anisotropyRotation=this.anisotropyRotation),this.anisotropyMap&&this.anisotropyMap.isTexture&&(s.anisotropyMap=this.anisotropyMap.toJSON(t).uuid),this.map&&this.map.isTexture&&(s.map=this.map.toJSON(t).uuid),this.matcap&&this.matcap.isTexture&&(s.matcap=this.matcap.toJSON(t).uuid),this.alphaMap&&this.alphaMap.isTexture&&(s.alphaMap=this.alphaMap.toJSON(t).uuid),this.lightMap&&this.lightMap.isTexture&&(s.lightMap=this.lightMap.toJSON(t).uuid,s.lightMapIntensity=this.lightMapIntensity),this.aoMap&&this.aoMap.isTexture&&(s.aoMap=this.aoMap.toJSON(t).uuid,s.aoMapIntensity=this.aoMapIntensity),this.bumpMap&&this.bumpMap.isTexture&&(s.bumpMap=this.bumpMap.toJSON(t).uuid,s.bumpScale=this.bumpScale),this.normalMap&&this.normalMap.isTexture&&(s.normalMap=this.normalMap.toJSON(t).uuid,s.normalMapType=this.normalMapType,s.normalScale=this.normalScale.toArray()),this.displacementMap&&this.displacementMap.isTexture&&(s.displacementMap=this.displacementMap.toJSON(t).uuid,s.displacementScale=this.displacementScale,s.displacementBias=this.displacementBias),this.roughnessMap&&this.roughnessMap.isTexture&&(s.roughnessMap=this.roughnessMap.toJSON(t).uuid),this.metalnessMap&&this.metalnessMap.isTexture&&(s.metalnessMap=this.metalnessMap.toJSON(t).uuid),this.emissiveMap&&this.emissiveMap.isTexture&&(s.emissiveMap=this.emissiveMap.toJSON(t).uuid),this.specularMap&&this.specularMap.isTexture&&(s.specularMap=this.specularMap.toJSON(t).uuid),this.specularIntensityMap&&this.specularIntensityMap.isTexture&&(s.specularIntensityMap=this.specularIntensityMap.toJSON(t).uuid),this.specularColorMap&&this.specularColorMap.isTexture&&(s.specularColorMap=this.specularColorMap.toJSON(t).uuid),this.envMap&&this.envMap.isTexture&&(s.envMap=this.envMap.toJSON(t).uuid,this.combine!==void 0&&(s.combine=this.combine)),this.envMapRotation!==void 0&&(s.envMapRotation=this.envMapRotation.toArray()),this.envMapIntensity!==void 0&&(s.envMapIntensity=this.envMapIntensity),this.reflectivity!==void 0&&(s.reflectivity=this.reflectivity),this.refractionRatio!==void 0&&(s.refractionRatio=this.refractionRatio),this.gradientMap&&this.gradientMap.isTexture&&(s.gradientMap=this.gradientMap.toJSON(t).uuid),this.transmission!==void 0&&(s.transmission=this.transmission),this.transmissionMap&&this.transmissionMap.isTexture&&(s.transmissionMap=this.transmissionMap.toJSON(t).uuid),this.thickness!==void 0&&(s.thickness=this.thickness),this.thicknessMap&&this.thicknessMap.isTexture&&(s.thicknessMap=this.thicknessMap.toJSON(t).uuid),this.attenuationDistance!==void 0&&this.attenuationDistance!==1/0&&(s.attenuationDistance=this.attenuationDistance),this.attenuationColor!==void 0&&(s.attenuationColor=this.attenuationColor.getHex()),this.size!==void 0&&(s.size=this.size),this.shadowSide!==null&&(s.shadowSide=this.shadowSide),this.sizeAttenuation!==void 0&&(s.sizeAttenuation=this.sizeAttenuation),this.blending!==1&&(s.blending=this.blending),this.side!==0&&(s.side=this.side),this.vertexColors===!0&&(s.vertexColors=!0),this.opacity<1&&(s.opacity=this.opacity),this.transparent===!0&&(s.transparent=!0),this.blendSrc!==204&&(s.blendSrc=this.blendSrc),this.blendDst!==205&&(s.blendDst=this.blendDst),this.blendEquation!==100&&(s.blendEquation=this.blendEquation),this.blendSrcAlpha!==null&&(s.blendSrcAlpha=this.blendSrcAlpha),this.blendDstAlpha!==null&&(s.blendDstAlpha=this.blendDstAlpha),this.blendEquationAlpha!==null&&(s.blendEquationAlpha=this.blendEquationAlpha),this.blendColor&&this.blendColor.isColor&&(s.blendColor=this.blendColor.getHex()),this.blendAlpha!==0&&(s.blendAlpha=this.blendAlpha),this.depthFunc!==3&&(s.depthFunc=this.depthFunc),this.depthTest===!1&&(s.depthTest=this.depthTest),this.depthWrite===!1&&(s.depthWrite=this.depthWrite),this.colorWrite===!1&&(s.colorWrite=this.colorWrite),this.stencilWriteMask!==255&&(s.stencilWriteMask=this.stencilWriteMask),this.stencilFunc!==519&&(s.stencilFunc=this.stencilFunc),this.stencilRef!==0&&(s.stencilRef=this.stencilRef),this.stencilFuncMask!==255&&(s.stencilFuncMask=this.stencilFuncMask),this.stencilFail!==7680&&(s.stencilFail=this.stencilFail),this.stencilZFail!==7680&&(s.stencilZFail=this.stencilZFail),this.stencilZPass!==7680&&(s.stencilZPass=this.stencilZPass),this.stencilWrite===!0&&(s.stencilWrite=this.stencilWrite),this.rotation!==void 0&&this.rotation!==0&&(s.rotation=this.rotation),this.polygonOffset===!0&&(s.polygonOffset=!0),this.polygonOffsetFactor!==0&&(s.polygonOffsetFactor=this.polygonOffsetFactor),this.polygonOffsetUnits!==0&&(s.polygonOffsetUnits=this.polygonOffsetUnits),this.linewidth!==void 0&&this.linewidth!==1&&(s.linewidth=this.linewidth),this.dashSize!==void 0&&(s.dashSize=this.dashSize),this.gapSize!==void 0&&(s.gapSize=this.gapSize),this.scale!==void 0&&(s.scale=this.scale),this.dithering===!0&&(s.dithering=!0),this.alphaTest>0&&(s.alphaTest=this.alphaTest),this.alphaHash===!0&&(s.alphaHash=!0),this.alphaToCoverage===!0&&(s.alphaToCoverage=!0),this.premultipliedAlpha===!0&&(s.premultipliedAlpha=!0),this.forceSinglePass===!0&&(s.forceSinglePass=!0),this.wireframe===!0&&(s.wireframe=!0),this.wireframeLinewidth>1&&(s.wireframeLinewidth=this.wireframeLinewidth),this.wireframeLinecap!=="round"&&(s.wireframeLinecap=this.wireframeLinecap),this.wireframeLinejoin!=="round"&&(s.wireframeLinejoin=this.wireframeLinejoin),this.flatShading===!0&&(s.flatShading=!0),this.visible===!1&&(s.visible=!1),this.toneMapped===!1&&(s.toneMapped=!1),this.fog===!1&&(s.fog=!1),Object.keys(this.userData).length>0&&(s.userData=this.userData);function e(r){const n=[];for(const a in r){const o=r[a];delete o.metadata,n.push(o)}return n}if(i){const r=e(t.textures),n=e(t.images);r.length>0&&(s.textures=r),n.length>0&&(s.images=n)}return s}clone(){return new this.constructor().copy(this)}copy(t){this.name=t.name,this.blending=t.blending,this.side=t.side,this.vertexColors=t.vertexColors,this.opacity=t.opacity,this.transparent=t.transparent,this.blendSrc=t.blendSrc,this.blendDst=t.blendDst,this.blendEquation=t.blendEquation,this.blendSrcAlpha=t.blendSrcAlpha,this.blendDstAlpha=t.blendDstAlpha,this.blendEquationAlpha=t.blendEquationAlpha,this.blendColor.copy(t.blendColor),this.blendAlpha=t.blendAlpha,this.depthFunc=t.depthFunc,this.depthTest=t.depthTest,this.depthWrite=t.depthWrite,this.stencilWriteMask=t.stencilWriteMask,this.stencilFunc=t.stencilFunc,this.stencilRef=t.stencilRef,this.stencilFuncMask=t.stencilFuncMask,this.stencilFail=t.stencilFail,this.stencilZFail=t.stencilZFail,this.stencilZPass=t.stencilZPass,this.stencilWrite=t.stencilWrite;const i=t.clippingPlanes;let s=null;if(i!==null){const e=i.length;s=new Array(e);for(let r=0;r!==e;++r)s[r]=i[r].clone()}return this.clippingPlanes=s,this.clipIntersection=t.clipIntersection,this.clipShadows=t.clipShadows,this.shadowSide=t.shadowSide,this.colorWrite=t.colorWrite,this.precision=t.precision,this.polygonOffset=t.polygonOffset,this.polygonOffsetFactor=t.polygonOffsetFactor,this.polygonOffsetUnits=t.polygonOffsetUnits,this.dithering=t.dithering,this.alphaTest=t.alphaTest,this.alphaHash=t.alphaHash,this.alphaToCoverage=t.alphaToCoverage,this.premultipliedAlpha=t.premultipliedAlpha,this.forceSinglePass=t.forceSinglePass,this.visible=t.visible,this.toneMapped=t.toneMapped,this.userData=JSON.parse(JSON.stringify(t.userData)),this}dispose(){this.dispatchEvent({type:"dispose"})}set needsUpdate(t){t===!0&&this.version++}}class vs extends bs{constructor(t){super(),this.isMeshBasicMaterial=!0,this.type="MeshBasicMaterial",this.color=new O(16777215),this.map=null,this.lightMap=null,this.lightMapIntensity=1,this.aoMap=null,this.aoMapIntensity=1,this.specularMap=null,this.alphaMap=null,this.envMap=null,this.envMapRotation=new Dt,this.combine=0,this.reflectivity=1,this.refractionRatio=.98,this.wireframe=!1,this.wireframeLinewidth=1,this.wireframeLinecap="round",this.wireframeLinejoin="round",this.fog=!0,this.setValues(t)}copy(t){return super.copy(t),this.color.copy(t.color),this.map=t.map,this.lightMap=t.lightMap,this.lightMapIntensity=t.lightMapIntensity,this.aoMap=t.aoMap,this.aoMapIntensity=t.aoMapIntensity,this.specularMap=t.specularMap,this.alphaMap=t.alphaMap,this.envMap=t.envMap,this.envMapRotation.copy(t.envMapRotation),this.combine=t.combine,this.reflectivity=t.reflectivity,this.refractionRatio=t.refractionRatio,this.wireframe=t.wireframe,this.wireframeLinewidth=t.wireframeLinewidth,this.wireframeLinecap=t.wireframeLinecap,this.wireframeLinejoin=t.wireframeLinejoin,this.fog=t.fog,this}}const E=new m,ii=new R;let _s=0;class Ct{constructor(t,i,s=!1){if(Array.isArray(t))throw new TypeError("THREE.BufferAttribute: array should be a Typed Array.");this.isBufferAttribute=!0,Object.defineProperty(this,"id",{value:_s++}),this.name="",this.array=t,this.itemSize=i,this.count=t!==void 0?t.length/i:0,this.normalized=s,this.usage=35044,this.updateRanges=[],this.gpuType=1015,this.version=0}onUploadCallback(){}set needsUpdate(t){t===!0&&this.version++}setUsage(t){return this.usage=t,this}addUpdateRange(t,i){this.updateRanges.push({start:t,count:i})}clearUpdateRanges(){this.updateRanges.length=0}copy(t){return this.name=t.name,this.array=new t.array.constructor(t.array),this.itemSize=t.itemSize,this.count=t.count,this.normalized=t.normalized,this.usage=t.usage,this.gpuType=t.gpuType,this}copyAt(t,i,s){t*=this.itemSize,s*=i.itemSize;for(let e=0,r=this.itemSize;e<r;e++)this.array[t+e]=i.array[s+e];return this}copyArray(t){return this.array.set(t),this}applyMatrix3(t){if(this.itemSize===2)for(let i=0,s=this.count;i<s;i++)ii.fromBufferAttribute(this,i),ii.applyMatrix3(t),this.setXY(i,ii.x,ii.y);else if(this.itemSize===3)for(let i=0,s=this.count;i<s;i++)E.fromBufferAttribute(this,i),E.applyMatrix3(t),this.setXYZ(i,E.x,E.y,E.z);return this}applyMatrix4(t){for(let i=0,s=this.count;i<s;i++)E.fromBufferAttribute(this,i),E.applyMatrix4(t),this.setXYZ(i,E.x,E.y,E.z);return this}applyNormalMatrix(t){for(let i=0,s=this.count;i<s;i++)E.fromBufferAttribute(this,i),E.applyNormalMatrix(t),this.setXYZ(i,E.x,E.y,E.z);return this}transformDirection(t){for(let i=0,s=this.count;i<s;i++)E.fromBufferAttribute(this,i),E.transformDirection(t),this.setXYZ(i,E.x,E.y,E.z);return this}set(t,i=0){return this.array.set(t,i),this}getComponent(t,i){let s=this.array[t*this.itemSize+i];return this.normalized&&(s=Et(s,this.array)),s}setComponent(t,i,s){return this.normalized&&(s=U(s,this.array)),this.array[t*this.itemSize+i]=s,this}getX(t){let i=this.array[t*this.itemSize];return this.normalized&&(i=Et(i,this.array)),i}setX(t,i){return this.normalized&&(i=U(i,this.array)),this.array[t*this.itemSize]=i,this}getY(t){let i=this.array[t*this.itemSize+1];return this.normalized&&(i=Et(i,this.array)),i}setY(t,i){return this.normalized&&(i=U(i,this.array)),this.array[t*this.itemSize+1]=i,this}getZ(t){let i=this.array[t*this.itemSize+2];return this.normalized&&(i=Et(i,this.array)),i}setZ(t,i){return this.normalized&&(i=U(i,this.array)),this.array[t*this.itemSize+2]=i,this}getW(t){let i=this.array[t*this.itemSize+3];return this.normalized&&(i=Et(i,this.array)),i}setW(t,i){return this.normalized&&(i=U(i,this.array)),this.array[t*this.itemSize+3]=i,this}setXY(t,i,s){return t*=this.itemSize,this.normalized&&(i=U(i,this.array),s=U(s,this.array)),this.array[t+0]=i,this.array[t+1]=s,this}setXYZ(t,i,s,e){return t*=this.itemSize,this.normalized&&(i=U(i,this.array),s=U(s,this.array),e=U(e,this.array)),this.array[t+0]=i,this.array[t+1]=s,this.array[t+2]=e,this}setXYZW(t,i,s,e,r){return t*=this.itemSize,this.normalized&&(i=U(i,this.array),s=U(s,this.array),e=U(e,this.array),r=U(r,this.array)),this.array[t+0]=i,this.array[t+1]=s,this.array[t+2]=e,this.array[t+3]=r,this}onUpload(t){return this.onUploadCallback=t,this}clone(){return new this.constructor(this.array,this.itemSize).copy(this)}toJSON(){const t={itemSize:this.itemSize,type:this.array.constructor.name,array:Array.from(this.array),normalized:this.normalized};return this.name!==""&&(t.name=this.name),this.usage!==35044&&(t.usage=this.usage),t}}class Ss extends Ct{constructor(t,i,s){super(new Uint16Array(t),i,s)}}class zs extends Ct{constructor(t,i,s){super(new Uint32Array(t),i,s)}}class Ts extends Ct{constructor(t,i,s){super(new Float32Array(t),i,s)}}let As=0;const H=new k,Ei=new $,zt=new m,q=new kt,Ft=new kt,B=new m;class Oi extends li{constructor(){super(),this.isBufferGeometry=!0,Object.defineProperty(this,"id",{value:As++}),this.uuid=It(),this.name="",this.type="BufferGeometry",this.index=null,this.indirect=null,this.attributes={},this.morphAttributes={},this.morphTargetsRelative=!1,this.groups=[],this.boundingBox=null,this.boundingSphere=null,this.drawRange={start:0,count:1/0},this.userData={}}getIndex(){return this.index}setIndex(t){return Array.isArray(t)?this.index=new(ns(t)?zs:Ss)(t,1):this.index=t,this}setIndirect(t){return this.indirect=t,this}getIndirect(){return this.indirect}getAttribute(t){return this.attributes[t]}setAttribute(t,i){return this.attributes[t]=i,this}deleteAttribute(t){return delete this.attributes[t],this}hasAttribute(t){return this.attributes[t]!==void 0}addGroup(t,i,s=0){this.groups.push({start:t,count:i,materialIndex:s})}clearGroups(){this.groups=[]}setDrawRange(t,i){this.drawRange.start=t,this.drawRange.count=i}applyMatrix4(t){const i=this.attributes.position;i!==void 0&&(i.applyMatrix4(t),i.needsUpdate=!0);const s=this.attributes.normal;if(s!==void 0){const r=new b().getNormalMatrix(t);s.applyNormalMatrix(r),s.needsUpdate=!0}const e=this.attributes.tangent;return e!==void 0&&(e.transformDirection(t),e.needsUpdate=!0),this.boundingBox!==null&&this.computeBoundingBox(),this.boundingSphere!==null&&this.computeBoundingSphere(),this}applyQuaternion(t){return H.makeRotationFromQuaternion(t),this.applyMatrix4(H),this}rotateX(t){return H.makeRotationX(t),this.applyMatrix4(H),this}rotateY(t){return H.makeRotationY(t),this.applyMatrix4(H),this}rotateZ(t){return H.makeRotationZ(t),this.applyMatrix4(H),this}translate(t,i,s){return H.makeTranslation(t,i,s),this.applyMatrix4(H),this}scale(t,i,s){return H.makeScale(t,i,s),this.applyMatrix4(H),this}lookAt(t){return Ei.lookAt(t),Ei.updateMatrix(),this.applyMatrix4(Ei.matrix),this}center(){return this.computeBoundingBox(),this.boundingBox.getCenter(zt).negate(),this.translate(zt.x,zt.y,zt.z),this}setFromPoints(t){const i=this.getAttribute("position");if(i===void 0){const s=[];for(let e=0,r=t.length;e<r;e++){const n=t[e];s.push(n.x,n.y,n.z||0)}this.setAttribute("position",new Ts(s,3))}else{const s=Math.min(t.length,i.count);for(let e=0;e<s;e++){const r=t[e];i.setXYZ(e,r.x,r.y,r.z||0)}t.length>i.count&&console.warn("THREE.BufferGeometry: Buffer size too small for points data. Use .dispose() and create a new geometry."),i.needsUpdate=!0}return this}computeBoundingBox(){this.boundingBox===null&&(this.boundingBox=new kt);const t=this.attributes.position,i=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box.",this),this.boundingBox.set(new m(-1/0,-1/0,-1/0),new m(1/0,1/0,1/0));return}if(t!==void 0){if(this.boundingBox.setFromBufferAttribute(t),i)for(let s=0,e=i.length;s<e;s++){const r=i[s];q.setFromBufferAttribute(r),this.morphTargetsRelative?(B.addVectors(this.boundingBox.min,q.min),this.boundingBox.expandByPoint(B),B.addVectors(this.boundingBox.max,q.max),this.boundingBox.expandByPoint(B)):(this.boundingBox.expandByPoint(q.min),this.boundingBox.expandByPoint(q.max))}}else this.boundingBox.makeEmpty();(isNaN(this.boundingBox.min.x)||isNaN(this.boundingBox.min.y)||isNaN(this.boundingBox.min.z))&&console.error('THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.',this)}computeBoundingSphere(){this.boundingSphere===null&&(this.boundingSphere=new Vt);const t=this.attributes.position,i=this.morphAttributes.position;if(t&&t.isGLBufferAttribute){console.error("THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere.",this),this.boundingSphere.set(new m,1/0);return}if(t){const s=this.boundingSphere.center;if(q.setFromBufferAttribute(t),i)for(let r=0,n=i.length;r<n;r++){const a=i[r];Ft.setFromBufferAttribute(a),this.morphTargetsRelative?(B.addVectors(q.min,Ft.min),q.expandByPoint(B),B.addVectors(q.max,Ft.max),q.expandByPoint(B)):(q.expandByPoint(Ft.min),q.expandByPoint(Ft.max))}q.getCenter(s);let e=0;for(let r=0,n=t.count;r<n;r++)B.fromBufferAttribute(t,r),e=Math.max(e,s.distanceToSquared(B));if(i)for(let r=0,n=i.length;r<n;r++){const a=i[r],o=this.morphTargetsRelative;for(let h=0,l=a.count;h<l;h++)B.fromBufferAttribute(a,h),o&&(zt.fromBufferAttribute(t,h),B.add(zt)),e=Math.max(e,s.distanceToSquared(B))}this.boundingSphere.radius=Math.sqrt(e),isNaN(this.boundingSphere.radius)&&console.error('THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.',this)}}computeTangents(){const t=this.index,i=this.attributes;if(t===null||i.position===void 0||i.normal===void 0||i.uv===void 0){console.error("THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)");return}const s=i.position,e=i.normal,r=i.uv;this.hasAttribute("tangent")===!1&&this.setAttribute("tangent",new Ct(new Float32Array(4*s.count),4));const n=this.getAttribute("tangent"),a=[],o=[];for(let A=0;A<s.count;A++)a[A]=new m,o[A]=new m;const h=new m,l=new m,u=new m,c=new R,d=new R,p=new R,y=new m,x=new m;function g(A,F,I){h.fromBufferAttribute(s,A),l.fromBufferAttribute(s,F),u.fromBufferAttribute(s,I),c.fromBufferAttribute(r,A),d.fromBufferAttribute(r,F),p.fromBufferAttribute(r,I),l.sub(h),u.sub(h),d.sub(c),p.sub(c);const D=1/(d.x*p.y-p.x*d.y);isFinite(D)&&(y.copy(l).multiplyScalar(p.y).addScaledVector(u,-d.y).multiplyScalar(D),x.copy(u).multiplyScalar(d.x).addScaledVector(l,-p.x).multiplyScalar(D),a[A].add(y),a[F].add(y),a[I].add(y),o[A].add(x),o[F].add(x),o[I].add(x))}let v=this.groups;v.length===0&&(v=[{start:0,count:t.count}]);for(let A=0,F=v.length;A<F;++A){const I=v[A],D=I.start,nt=I.count;for(let P=D,at=D+nt;P<at;P+=3)g(t.getX(P+0),t.getX(P+1),t.getX(P+2))}const S=new m,w=new m,z=new m,C=new m;function _(A){z.fromBufferAttribute(e,A),C.copy(z);const F=a[A];S.copy(F),S.sub(z.multiplyScalar(z.dot(F))).normalize(),w.crossVectors(C,F);const I=w.dot(o[A])<0?-1:1;n.setXYZW(A,S.x,S.y,S.z,I)}for(let A=0,F=v.length;A<F;++A){const I=v[A],D=I.start,nt=I.count;for(let P=D,at=D+nt;P<at;P+=3)_(t.getX(P+0)),_(t.getX(P+1)),_(t.getX(P+2))}}computeVertexNormals(){const t=this.index,i=this.getAttribute("position");if(i!==void 0){let s=this.getAttribute("normal");if(s===void 0)s=new Ct(new Float32Array(i.count*3),3),this.setAttribute("normal",s);else for(let c=0,d=s.count;c<d;c++)s.setXYZ(c,0,0,0);const e=new m,r=new m,n=new m,a=new m,o=new m,h=new m,l=new m,u=new m;if(t)for(let c=0,d=t.count;c<d;c+=3){const p=t.getX(c+0),y=t.getX(c+1),x=t.getX(c+2);e.fromBufferAttribute(i,p),r.fromBufferAttribute(i,y),n.fromBufferAttribute(i,x),l.subVectors(n,r),u.subVectors(e,r),l.cross(u),a.fromBufferAttribute(s,p),o.fromBufferAttribute(s,y),h.fromBufferAttribute(s,x),a.add(l),o.add(l),h.add(l),s.setXYZ(p,a.x,a.y,a.z),s.setXYZ(y,o.x,o.y,o.z),s.setXYZ(x,h.x,h.y,h.z)}else for(let c=0,d=i.count;c<d;c+=3)e.fromBufferAttribute(i,c+0),r.fromBufferAttribute(i,c+1),n.fromBufferAttribute(i,c+2),l.subVectors(n,r),u.subVectors(e,r),l.cross(u),s.setXYZ(c+0,l.x,l.y,l.z),s.setXYZ(c+1,l.x,l.y,l.z),s.setXYZ(c+2,l.x,l.y,l.z);this.normalizeNormals(),s.needsUpdate=!0}}normalizeNormals(){const t=this.attributes.normal;for(let i=0,s=t.count;i<s;i++)B.fromBufferAttribute(t,i),B.normalize(),t.setXYZ(i,B.x,B.y,B.z)}toNonIndexed(){function t(a,o){const h=a.array,l=a.itemSize,u=a.normalized,c=new h.constructor(o.length*l);let d=0,p=0;for(let y=0,x=o.length;y<x;y++){a.isInterleavedBufferAttribute?d=o[y]*a.data.stride+a.offset:d=o[y]*l;for(let g=0;g<l;g++)c[p++]=h[d++]}return new Ct(c,l,u)}if(this.index===null)return console.warn("THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed."),this;const i=new Oi,s=this.index.array,e=this.attributes;for(const a in e){const o=e[a],h=t(o,s);i.setAttribute(a,h)}const r=this.morphAttributes;for(const a in r){const o=[],h=r[a];for(let l=0,u=h.length;l<u;l++){const c=h[l],d=t(c,s);o.push(d)}i.morphAttributes[a]=o}i.morphTargetsRelative=this.morphTargetsRelative;const n=this.groups;for(let a=0,o=n.length;a<o;a++){const h=n[a];i.addGroup(h.start,h.count,h.materialIndex)}return i}toJSON(){const t={metadata:{version:4.7,type:"BufferGeometry",generator:"BufferGeometry.toJSON"}};if(t.uuid=this.uuid,t.type=this.type,this.name!==""&&(t.name=this.name),Object.keys(this.userData).length>0&&(t.userData=this.userData),this.parameters!==void 0){const o=this.parameters;for(const h in o)o[h]!==void 0&&(t[h]=o[h]);return t}t.data={attributes:{}};const i=this.index;i!==null&&(t.data.index={type:i.array.constructor.name,array:Array.prototype.slice.call(i.array)});const s=this.attributes;for(const o in s){const h=s[o];t.data.attributes[o]=h.toJSON(t.data)}const e={};let r=!1;for(const o in this.morphAttributes){const h=this.morphAttributes[o],l=[];for(let u=0,c=h.length;u<c;u++){const d=h[u];l.push(d.toJSON(t.data))}l.length>0&&(e[o]=l,r=!0)}r&&(t.data.morphAttributes=e,t.data.morphTargetsRelative=this.morphTargetsRelative);const n=this.groups;n.length>0&&(t.data.groups=JSON.parse(JSON.stringify(n)));const a=this.boundingSphere;return a!==null&&(t.data.boundingSphere=a.toJSON()),t}clone(){return new this.constructor().copy(this)}copy(t){this.index=null,this.attributes={},this.morphAttributes={},this.groups=[],this.boundingBox=null,this.boundingSphere=null;const i={};this.name=t.name;const s=t.index;s!==null&&this.setIndex(s.clone());const e=t.attributes;for(const h in e){const l=e[h];this.setAttribute(h,l.clone(i))}const r=t.morphAttributes;for(const h in r){const l=[],u=r[h];for(let c=0,d=u.length;c<d;c++)l.push(u[c].clone(i));this.morphAttributes[h]=l}this.morphTargetsRelative=t.morphTargetsRelative;const n=t.groups;for(let h=0,l=n.length;h<l;h++){const u=n[h];this.addGroup(u.start,u.count,u.materialIndex)}const a=t.boundingBox;a!==null&&(this.boundingBox=a.clone());const o=t.boundingSphere;return o!==null&&(this.boundingSphere=o.clone()),this.drawRange.start=t.drawRange.start,this.drawRange.count=t.drawRange.count,this.userData=t.userData,this}dispose(){this.dispatchEvent({type:"dispose"})}}const Gi=new k,mt=new ss,si=new Vt,Qi=new m,ei=new m,ri=new m,ni=new m,Ri=new m,ai=new m,$i=new m,hi=new m;class Cs extends ${constructor(t=new Oi,i=new vs){super(),this.isMesh=!0,this.type="Mesh",this.geometry=t,this.material=i,this.morphTargetDictionary=void 0,this.morphTargetInfluences=void 0,this.count=1,this.updateMorphTargets()}copy(t,i){return super.copy(t,i),t.morphTargetInfluences!==void 0&&(this.morphTargetInfluences=t.morphTargetInfluences.slice()),t.morphTargetDictionary!==void 0&&(this.morphTargetDictionary=Object.assign({},t.morphTargetDictionary)),this.material=Array.isArray(t.material)?t.material.slice():t.material,this.geometry=t.geometry,this}updateMorphTargets(){const t=this.geometry.morphAttributes,i=Object.keys(t);if(i.length>0){const s=t[i[0]];if(s!==void 0){this.morphTargetInfluences=[],this.morphTargetDictionary={};for(let e=0,r=s.length;e<r;e++){const n=s[e].name||String(e);this.morphTargetInfluences.push(0),this.morphTargetDictionary[n]=e}}}}getVertexPosition(t,i){const s=this.geometry,e=s.attributes.position,r=s.morphAttributes.position,n=s.morphTargetsRelative;i.fromBufferAttribute(e,t);const a=this.morphTargetInfluences;if(r&&a){ai.set(0,0,0);for(let o=0,h=r.length;o<h;o++){const l=a[o],u=r[o];l!==0&&(Ri.fromBufferAttribute(u,t),n?ai.addScaledVector(Ri,l):ai.addScaledVector(Ri.sub(i),l))}i.add(ai)}return i}raycast(t,i){const s=this.geometry,e=this.material,r=this.matrixWorld;e!==void 0&&(s.boundingSphere===null&&s.computeBoundingSphere(),si.copy(s.boundingSphere),si.applyMatrix4(r),mt.copy(t.ray).recast(t.near),!(si.containsPoint(mt.origin)===!1&&(mt.intersectSphere(si,Qi)===null||mt.origin.distanceToSquared(Qi)>(t.far-t.near)**2))&&(Gi.copy(r).invert(),mt.copy(t.ray).applyMatrix4(Gi),!(s.boundingBox!==null&&mt.intersectsBox(s.boundingBox)===!1)&&this._computeIntersections(t,i,mt)))}_computeIntersections(t,i,s){let e;const r=this.geometry,n=this.material,a=r.index,o=r.attributes.position,h=r.attributes.uv,l=r.attributes.uv1,u=r.attributes.normal,c=r.groups,d=r.drawRange;if(a!==null)if(Array.isArray(n))for(let p=0,y=c.length;p<y;p++){const x=c[p],g=n[x.materialIndex],v=Math.max(x.start,d.start),S=Math.min(a.count,Math.min(x.start+x.count,d.start+d.count));for(let w=v,z=S;w<z;w+=3){const C=a.getX(w),_=a.getX(w+1),A=a.getX(w+2);e=oi(this,g,t,s,h,l,u,C,_,A),e&&(e.faceIndex=Math.floor(w/3),e.face.materialIndex=x.materialIndex,i.push(e))}}else{const p=Math.max(0,d.start),y=Math.min(a.count,d.start+d.count);for(let x=p,g=y;x<g;x+=3){const v=a.getX(x),S=a.getX(x+1),w=a.getX(x+2);e=oi(this,n,t,s,h,l,u,v,S,w),e&&(e.faceIndex=Math.floor(x/3),i.push(e))}}else if(o!==void 0)if(Array.isArray(n))for(let p=0,y=c.length;p<y;p++){const x=c[p],g=n[x.materialIndex],v=Math.max(x.start,d.start),S=Math.min(o.count,Math.min(x.start+x.count,d.start+d.count));for(let w=v,z=S;w<z;w+=3){const C=w,_=w+1,A=w+2;e=oi(this,g,t,s,h,l,u,C,_,A),e&&(e.faceIndex=Math.floor(w/3),e.face.materialIndex=x.materialIndex,i.push(e))}}else{const p=Math.max(0,d.start),y=Math.min(o.count,d.start+d.count);for(let x=p,g=y;x<g;x+=3){const v=x,S=x+1,w=x+2;e=oi(this,n,t,s,h,l,u,v,S,w),e&&(e.faceIndex=Math.floor(x/3),i.push(e))}}}}function ks(f,t,i,s,e,r,n,a){let o;if(t.side===1?o=s.intersectTriangle(n,r,e,!0,a):o=s.intersectTriangle(e,r,n,t.side===0,a),o===null)return null;hi.copy(a),hi.applyMatrix4(f.matrixWorld);const h=i.ray.origin.distanceTo(hi);return h<i.near||h>i.far?null:{distance:h,point:hi.clone(),object:f}}function oi(f,t,i,s,e,r,n,a,o,h){f.getVertexPosition(a,ei),f.getVertexPosition(o,ri),f.getVertexPosition(h,ni);const l=ks(f,t,i,s,ei,ri,ni,$i);if(l){const u=new m;Q.getBarycoord($i,ei,ri,ni,u),e&&(l.uv=Q.getInterpolatedAttribute(e,a,o,h,u,new R)),r&&(l.uv1=Q.getInterpolatedAttribute(r,a,o,h,u,new R)),n&&(l.normal=Q.getInterpolatedAttribute(n,a,o,h,u,new m),l.normal.dot(s.direction)>0&&l.normal.multiplyScalar(-1));const c={a,b:o,c:h,normal:new m,materialIndex:0};Q.getNormal(ei,ri,ni,c.normal),l.face=c,l.barycoord=u}return l}function Es(f){const t={};for(const i in f){t[i]={};for(const s in f[i]){const e=f[i][s];e&&(e.isColor||e.isMatrix3||e.isMatrix4||e.isVector2||e.isVector3||e.isVector4||e.isTexture||e.isQuaternion)?e.isRenderTargetTexture?(console.warn("UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms()."),t[i][s]=null):t[i][s]=e.clone():Array.isArray(e)?t[i][s]=e.slice():t[i][s]=e}}return t}function L(f){const t={};for(let i=0;i<f.length;i++){const s=Es(f[i]);for(const e in s)t[e]=s[e]}return t}class Rs extends ${constructor(){super(),this.isCamera=!0,this.type="Camera",this.matrixWorldInverse=new k,this.projectionMatrix=new k,this.projectionMatrixInverse=new k,this.coordinateSystem=2e3,this._reversedDepth=!1}get reversedDepth(){return this._reversedDepth}copy(t,i){return super.copy(t,i),this.matrixWorldInverse.copy(t.matrixWorldInverse),this.projectionMatrix.copy(t.projectionMatrix),this.projectionMatrixInverse.copy(t.projectionMatrixInverse),this.coordinateSystem=t.coordinateSystem,this}getWorldDirection(t){return super.getWorldDirection(t).negate()}updateMatrixWorld(t){super.updateMatrixWorld(t),this.matrixWorldInverse.copy(this.matrixWorld).invert()}updateWorldMatrix(t,i){super.updateWorldMatrix(t,i),this.matrixWorldInverse.copy(this.matrixWorld).invert()}clone(){return new this.constructor().copy(this)}}new m;new R;new R;class Bs extends X{constructor(t=[],i=301,s,e,r,n,a,o,h,l){super(t,i,s,e,r,n,a,o,h,l),this.isCubeTexture=!0,this.flipY=!1}get images(){return this.image}set images(t){this.image=t}}new k;new k;new kt;new k;new Cs;new Vt;const Bi=new m,Os=new m,Fs=new b;class Ds{constructor(t=new m(1,0,0),i=0){this.isPlane=!0,this.normal=t,this.constant=i}set(t,i){return this.normal.copy(t),this.constant=i,this}setComponents(t,i,s,e){return this.normal.set(t,i,s),this.constant=e,this}setFromNormalAndCoplanarPoint(t,i){return this.normal.copy(t),this.constant=-i.dot(this.normal),this}setFromCoplanarPoints(t,i,s){const e=Bi.subVectors(s,i).cross(Os.subVectors(t,i)).normalize();return this.setFromNormalAndCoplanarPoint(e,t),this}copy(t){return this.normal.copy(t.normal),this.constant=t.constant,this}normalize(){const t=1/this.normal.length();return this.normal.multiplyScalar(t),this.constant*=t,this}negate(){return this.constant*=-1,this.normal.negate(),this}distanceToPoint(t){return this.normal.dot(t)+this.constant}distanceToSphere(t){return this.distanceToPoint(t.center)-t.radius}projectPoint(t,i){return i.copy(t).addScaledVector(this.normal,-this.distanceToPoint(t))}intersectLine(t,i){const s=t.delta(Bi),e=this.normal.dot(s);if(e===0)return this.distanceToPoint(t.start)===0?i.copy(t.start):null;const r=-(t.start.dot(this.normal)+this.constant)/e;return r<0||r>1?null:i.copy(t.start).addScaledVector(s,r)}intersectsLine(t){const i=this.distanceToPoint(t.start),s=this.distanceToPoint(t.end);return i<0&&s>0||s<0&&i>0}intersectsBox(t){return t.intersectsPlane(this)}intersectsSphere(t){return t.intersectsPlane(this)}coplanarPoint(t){return t.copy(this.normal).multiplyScalar(-this.constant)}applyMatrix4(t,i){const s=i||Fs.getNormalMatrix(t),e=this.coplanarPoint(Bi).applyMatrix4(t),r=this.normal.applyMatrix3(s).normalize();return this.constant=-e.dot(r),this}translate(t){return this.constant-=t.dot(this.normal),this}equals(t){return t.normal.equals(this.normal)&&t.constant===this.constant}clone(){return new this.constructor().copy(this)}}new Vt;new R(.5,.5);new m;new m;new m;new k;new ss;new Vt;new m;new m;new m;new m;class Is extends X{constructor(t,i,s=1014,e,r,n,a=1003,o=1003,h,l=1026,u=1){if(l!==1026&&l!==1027)throw new Error("DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat");const c={width:t,height:i,depth:u};super(c,e,r,n,a,o,l,s,h),this.isDepthTexture=!0,this.flipY=!1,this.generateMipmaps=!1,this.compareFunction=null}copy(t){return super.copy(t),this.source=new is(Object.assign({},t.image)),this.compareFunction=t.compareFunction,this}toJSON(t){const i=super.toJSON(t);return this.compareFunction!==null&&(i.compareFunction=this.compareFunction),i}}new k;new m;new m;class Ps extends Rs{constructor(t=-1,i=1,s=1,e=-1,r=.1,n=2e3){super(),this.isOrthographicCamera=!0,this.type="OrthographicCamera",this.zoom=1,this.view=null,this.left=t,this.right=i,this.top=s,this.bottom=e,this.near=r,this.far=n,this.updateProjectionMatrix()}copy(t,i){return super.copy(t,i),this.left=t.left,this.right=t.right,this.top=t.top,this.bottom=t.bottom,this.near=t.near,this.far=t.far,this.zoom=t.zoom,this.view=t.view===null?null:Object.assign({},t.view),this}setViewOffset(t,i,s,e,r,n){this.view===null&&(this.view={enabled:!0,fullWidth:1,fullHeight:1,offsetX:0,offsetY:0,width:1,height:1}),this.view.enabled=!0,this.view.fullWidth=t,this.view.fullHeight=i,this.view.offsetX=s,this.view.offsetY=e,this.view.width=r,this.view.height=n,this.updateProjectionMatrix()}clearViewOffset(){this.view!==null&&(this.view.enabled=!1),this.updateProjectionMatrix()}updateProjectionMatrix(){const t=(this.right-this.left)/(2*this.zoom),i=(this.top-this.bottom)/(2*this.zoom),s=(this.right+this.left)/2,e=(this.top+this.bottom)/2;let r=s-t,n=s+t,a=e+i,o=e-i;if(this.view!==null&&this.view.enabled){const h=(this.right-this.left)/this.view.fullWidth/this.zoom,l=(this.top-this.bottom)/this.view.fullHeight/this.zoom;r+=h*this.view.offsetX,n=r+h*this.view.width,a-=l*this.view.offsetY,o=a-l*this.view.height}this.projectionMatrix.makeOrthographic(r,n,a,o,this.near,this.far,this.coordinateSystem,this.reversedDepth),this.projectionMatrixInverse.copy(this.projectionMatrix).invert()}toJSON(t){const i=super.toJSON(t);return i.object.zoom=this.zoom,i.object.left=this.left,i.object.right=this.right,i.object.top=this.top,i.object.bottom=this.bottom,i.object.near=this.near,i.object.far=this.far,this.view!==null&&(i.object.view=Object.assign({},this.view)),i}}new m;new m;new m;new m;new m;new m;new m;typeof __THREE_DEVTOOLS__<"u"&&__THREE_DEVTOOLS__.dispatchEvent(new CustomEvent("register",{detail:{revision:"179"}}));typeof window<"u"&&(window.__THREE__?console.warn("WARNING: Multiple instances of Three.js being imported."):window.__THREE__="179");const Ns=`#define STANDARD
varying vec3 vViewPosition;
#ifdef USE_TRANSMISSION
	varying vec3 vWorldPosition;
#endif
#include <common>
#include <batching_pars_vertex>
#include <uv_pars_vertex>
#include <displacementmap_pars_vertex>
#include <color_pars_vertex>
#include <fog_pars_vertex>
#include <normal_pars_vertex>
#include <morphtarget_pars_vertex>
#include <skinning_pars_vertex>
#include <shadowmap_pars_vertex>
#include <logdepthbuf_pars_vertex>
#include <clipping_planes_pars_vertex>
void main() {
	#include <uv_vertex>
	#include <color_vertex>
	#include <morphinstance_vertex>
	#include <morphcolor_vertex>
	#include <batching_vertex>
	#include <beginnormal_vertex>
	#include <morphnormal_vertex>
	#include <skinbase_vertex>
	#include <skinnormal_vertex>
	#include <defaultnormal_vertex>
	#include <normal_vertex>
	#include <begin_vertex>
	#include <morphtarget_vertex>
	#include <skinning_vertex>
	#include <displacementmap_vertex>
	#include <project_vertex>
	#include <logdepthbuf_vertex>
	#include <clipping_planes_vertex>
	vViewPosition = - mvPosition.xyz;
	#include <worldpos_vertex>
	#include <shadowmap_vertex>
	#include <fog_vertex>
#ifdef USE_TRANSMISSION
	vWorldPosition = worldPosition.xyz;
#endif
}`,Vs=`#define STANDARD
#ifdef PHYSICAL
	#define IOR
	#define USE_SPECULAR
#endif
uniform vec3 diffuse;
uniform vec3 emissive;
uniform float roughness;
uniform float metalness;
uniform float opacity;
#ifdef IOR
	uniform float ior;
#endif
#ifdef USE_SPECULAR
	uniform float specularIntensity;
	uniform vec3 specularColor;
	#ifdef USE_SPECULAR_COLORMAP
		uniform sampler2D specularColorMap;
	#endif
	#ifdef USE_SPECULAR_INTENSITYMAP
		uniform sampler2D specularIntensityMap;
	#endif
#endif
#ifdef USE_CLEARCOAT
	uniform float clearcoat;
	uniform float clearcoatRoughness;
#endif
#ifdef USE_DISPERSION
	uniform float dispersion;
#endif
#ifdef USE_IRIDESCENCE
	uniform float iridescence;
	uniform float iridescenceIOR;
	uniform float iridescenceThicknessMinimum;
	uniform float iridescenceThicknessMaximum;
#endif
#ifdef USE_SHEEN
	uniform vec3 sheenColor;
	uniform float sheenRoughness;
	#ifdef USE_SHEEN_COLORMAP
		uniform sampler2D sheenColorMap;
	#endif
	#ifdef USE_SHEEN_ROUGHNESSMAP
		uniform sampler2D sheenRoughnessMap;
	#endif
#endif
#ifdef USE_ANISOTROPY
	uniform vec2 anisotropyVector;
	#ifdef USE_ANISOTROPYMAP
		uniform sampler2D anisotropyMap;
	#endif
#endif
varying vec3 vViewPosition;
#include <common>
#include <packing>
#include <dithering_pars_fragment>
#include <color_pars_fragment>
#include <uv_pars_fragment>
#include <map_pars_fragment>
#include <alphamap_pars_fragment>
#include <alphatest_pars_fragment>
#include <alphahash_pars_fragment>
#include <aomap_pars_fragment>
#include <lightmap_pars_fragment>
#include <emissivemap_pars_fragment>
#include <iridescence_fragment>
#include <cube_uv_reflection_fragment>
#include <envmap_common_pars_fragment>
#include <envmap_physical_pars_fragment>
#include <fog_pars_fragment>
#include <lights_pars_begin>
#include <normal_pars_fragment>
#include <lights_physical_pars_fragment>
#include <transmission_pars_fragment>
#include <shadowmap_pars_fragment>
#include <bumpmap_pars_fragment>
#include <normalmap_pars_fragment>
#include <clearcoat_pars_fragment>
#include <iridescence_pars_fragment>
#include <roughnessmap_pars_fragment>
#include <metalnessmap_pars_fragment>
#include <logdepthbuf_pars_fragment>
#include <clipping_planes_pars_fragment>
void main() {
	vec4 diffuseColor = vec4( diffuse, opacity );
	#include <clipping_planes_fragment>
	ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );
	vec3 totalEmissiveRadiance = emissive;
	#include <logdepthbuf_fragment>
	#include <map_fragment>
	#include <color_fragment>
	#include <alphamap_fragment>
	#include <alphatest_fragment>
	#include <alphahash_fragment>
	#include <roughnessmap_fragment>
	#include <metalnessmap_fragment>
	#include <normal_fragment_begin>
	#include <normal_fragment_maps>
	#include <clearcoat_normal_fragment_begin>
	#include <clearcoat_normal_fragment_maps>
	#include <emissivemap_fragment>
	#include <lights_physical_fragment>
	#include <lights_fragment_begin>
	#include <lights_fragment_maps>
	#include <lights_fragment_end>
	#include <aomap_fragment>
	vec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;
	vec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;
	#include <transmission_fragment>
	vec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;
	#ifdef USE_SHEEN
		float sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );
		outgoingLight = outgoingLight * sheenEnergyComp + sheenSpecularDirect + sheenSpecularIndirect;
	#endif
	#ifdef USE_CLEARCOAT
		float dotNVcc = saturate( dot( geometryClearcoatNormal, geometryViewDir ) );
		vec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );
		outgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + ( clearcoatSpecularDirect + clearcoatSpecularIndirect ) * material.clearcoat;
	#endif
	#include <opaque_fragment>
	#include <tonemapping_fragment>
	#include <colorspace_fragment>
	#include <fog_fragment>
	#include <premultiplied_alpha_fragment>
	#include <dithering_fragment>
}`,Ki={meshphysical_vert:Ns,meshphysical_frag:Vs},M={common:{diffuse:{value:new O(16777215)},opacity:{value:1},map:{value:null},mapTransform:{value:new b},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0}},specularmap:{specularMap:{value:null},specularMapTransform:{value:new b}},envmap:{envMap:{value:null},envMapRotation:{value:new b},flipEnvMap:{value:-1},reflectivity:{value:1},ior:{value:1.5},refractionRatio:{value:.98}},aomap:{aoMap:{value:null},aoMapIntensity:{value:1},aoMapTransform:{value:new b}},lightmap:{lightMap:{value:null},lightMapIntensity:{value:1},lightMapTransform:{value:new b}},bumpmap:{bumpMap:{value:null},bumpMapTransform:{value:new b},bumpScale:{value:1}},normalmap:{normalMap:{value:null},normalMapTransform:{value:new b},normalScale:{value:new R(1,1)}},displacementmap:{displacementMap:{value:null},displacementMapTransform:{value:new b},displacementScale:{value:1},displacementBias:{value:0}},emissivemap:{emissiveMap:{value:null},emissiveMapTransform:{value:new b}},metalnessmap:{metalnessMap:{value:null},metalnessMapTransform:{value:new b}},roughnessmap:{roughnessMap:{value:null},roughnessMapTransform:{value:new b}},gradientmap:{gradientMap:{value:null}},fog:{fogDensity:{value:25e-5},fogNear:{value:1},fogFar:{value:2e3},fogColor:{value:new O(16777215)}},lights:{ambientLightColor:{value:[]},lightProbe:{value:[]},directionalLights:{value:[],properties:{direction:{},color:{}}},directionalLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},directionalShadowMap:{value:[]},directionalShadowMatrix:{value:[]},spotLights:{value:[],properties:{color:{},position:{},direction:{},distance:{},coneCos:{},penumbraCos:{},decay:{}}},spotLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{}}},spotLightMap:{value:[]},spotShadowMap:{value:[]},spotLightMatrix:{value:[]},pointLights:{value:[],properties:{color:{},position:{},decay:{},distance:{}}},pointLightShadows:{value:[],properties:{shadowIntensity:1,shadowBias:{},shadowNormalBias:{},shadowRadius:{},shadowMapSize:{},shadowCameraNear:{},shadowCameraFar:{}}},pointShadowMap:{value:[]},pointShadowMatrix:{value:[]},hemisphereLights:{value:[],properties:{direction:{},skyColor:{},groundColor:{}}},rectAreaLights:{value:[],properties:{color:{},position:{},width:{},height:{}}},ltc_1:{value:null},ltc_2:{value:null}},points:{diffuse:{value:new O(16777215)},opacity:{value:1},size:{value:1},scale:{value:1},map:{value:null},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0},uvTransform:{value:new b}},sprite:{diffuse:{value:new O(16777215)},opacity:{value:1},center:{value:new R(.5,.5)},rotation:{value:0},map:{value:null},mapTransform:{value:new b},alphaMap:{value:null},alphaMapTransform:{value:new b},alphaTest:{value:0}}},ts={basic:{uniforms:L([M.common,M.specularmap,M.envmap,M.aomap,M.lightmap,M.fog])},lambert:{uniforms:L([M.common,M.specularmap,M.envmap,M.aomap,M.lightmap,M.emissivemap,M.bumpmap,M.normalmap,M.displacementmap,M.fog,M.lights,{emissive:{value:new O(0)}}])},phong:{uniforms:L([M.common,M.specularmap,M.envmap,M.aomap,M.lightmap,M.emissivemap,M.bumpmap,M.normalmap,M.displacementmap,M.fog,M.lights,{emissive:{value:new O(0)},specular:{value:new O(1118481)},shininess:{value:30}}])},standard:{uniforms:L([M.common,M.envmap,M.aomap,M.lightmap,M.emissivemap,M.bumpmap,M.normalmap,M.displacementmap,M.roughnessmap,M.metalnessmap,M.fog,M.lights,{emissive:{value:new O(0)},roughness:{value:1},metalness:{value:0},envMapIntensity:{value:1}}])},toon:{uniforms:L([M.common,M.aomap,M.lightmap,M.emissivemap,M.bumpmap,M.normalmap,M.displacementmap,M.gradientmap,M.fog,M.lights,{emissive:{value:new O(0)}}])},matcap:{uniforms:L([M.common,M.bumpmap,M.normalmap,M.displacementmap,M.fog,{matcap:{value:null}}])},points:{uniforms:L([M.points,M.fog])},dashed:{uniforms:L([M.common,M.fog,{scale:{value:1},dashSize:{value:1},totalSize:{value:2}}])},depth:{uniforms:L([M.common,M.displacementmap])},normal:{uniforms:L([M.common,M.bumpmap,M.normalmap,M.displacementmap,{opacity:{value:1}}])},sprite:{uniforms:L([M.sprite,M.fog])},background:{uniforms:{uvTransform:{value:new b}}},backgroundCube:{uniforms:{backgroundRotation:{value:new b}}},distanceRGBA:{uniforms:L([M.common,M.displacementmap,{referencePosition:{value:new m},nearDistance:{value:1},farDistance:{value:1e3}}])},shadow:{uniforms:L([M.lights,M.fog,{color:{value:new O(0)},opacity:{value:1}}])}};ts.physical={uniforms:L([ts.standard.uniforms,{clearcoat:{value:0},clearcoatMap:{value:null},clearcoatMapTransform:{value:new b},clearcoatNormalMap:{value:null},clearcoatNormalMapTransform:{value:new b},clearcoatNormalScale:{value:new R(1,1)},clearcoatRoughness:{value:0},clearcoatRoughnessMap:{value:null},clearcoatRoughnessMapTransform:{value:new b},dispersion:{value:0},iridescence:{value:0},iridescenceMap:{value:null},iridescenceMapTransform:{value:new b},iridescenceIOR:{value:1.3},iridescenceThicknessMinimum:{value:100},iridescenceThicknessMaximum:{value:400},iridescenceThicknessMap:{value:null},iridescenceThicknessMapTransform:{value:new b},sheen:{value:0},sheenColor:{value:new O(0)},sheenColorMap:{value:null},sheenColorMapTransform:{value:new b},sheenRoughness:{value:1},sheenRoughnessMap:{value:null},sheenRoughnessMapTransform:{value:new b},transmission:{value:0},transmissionMap:{value:null},transmissionMapTransform:{value:new b},transmissionSamplerSize:{value:new R},transmissionSamplerMap:{value:null},thickness:{value:0},thicknessMap:{value:null},thicknessMapTransform:{value:new b},attenuationDistance:{value:0},attenuationColor:{value:new O(0)},specularColor:{value:new O(1,1,1)},specularColorMap:{value:null},specularColorMapTransform:{value:new b},specularIntensity:{value:1},specularIntensityMap:{value:null},specularIntensityMapTransform:{value:new b},anisotropyVector:{value:new R},anisotropyMap:{value:null},anisotropyMapTransform:{value:new b}}]),vertexShader:Ki.meshphysical_vert,fragmentShader:Ki.meshphysical_frag};new k;new Ps;new O;const yt=(1+Math.sqrt(5))/2,Tt=1/yt;new m(-yt,Tt,0),new m(yt,Tt,0),new m(-Tt,0,yt),new m(Tt,0,yt),new m(0,yt,-Tt),new m(0,yt,Tt),new m(-1,1,-1),new m(1,1,-1),new m(-1,1,1),new m(1,1,1);new m;new X;new Is(1,1);new us;new cs;new Bs;new b;new m;new k;export{Ds as E,m as N,ss as T};
//# sourceMappingURL=three.module23.js.map
