{"version":3,"file":"fractal2.js","sources":["../../js/fractal.js"],"sourcesContent":["const canvas = document.getElementById(\"fractalCanvas\");\nconst ctx = canvas.getContext(\"2d\");\n\nconst formulaInput = document.getElementById(\"funcInput\");\nconst cReInput = document.getElementById(\"cReal\");\nconst cImInput = document.getElementById(\"cImag\");\nconst iterationsInput = document.getElementById(\"iterations\");\nconst gradientInput = document.getElementById(\"gradient\");\nconst resetBtn = document.getElementById(\"resetView\");\n\nlet width = window.innerWidth;\nlet height = window.innerHeight;\ncanvas.width = width;\ncanvas.height = height;\n\nlet centerX = 0;\nlet centerY = 0;\nlet scale = 4 / width;\n\nlet dragging = false;\nlet dragStart = { x: 0, y: 0 };\nlet dragOffset = { x: 0, y: 0 };\nlet lastCenter = { x: 0, y: 0 };\n\nlet isLoading = false;\n\n// Offscreen canvas to hold fractal pixels for smooth zoom/pan\nconst offscreenCanvas = document.createElement(\"canvas\");\nconst offCtx = offscreenCanvas.getContext(\"2d\");\noffscreenCanvas.width = width;\noffscreenCanvas.height = height;\n\n// Touch/pinch zoom state\nlet isPinching = false;\nlet pinchStartDist = 0;\nlet pinchStartScale = 1;\nlet pinchStartCenter = null;\nlet pinchTempScale = 1;\nlet pinchTempOffset = { x: 0, y: 0 };\nlet pinchLastCenter = null;\n\nfunction getDistance(t1, t2) {\n  const dx = t2.clientX - t1.clientX;\n  const dy = t2.clientY - t1.clientY;\n  return Math.sqrt(dx * dx + dy * dy);\n}\n\nfunction getTouchCenter(t1, t2) {\n  return {\n    x: (t1.clientX + t2.clientX) / 2,\n    y: (t1.clientY + t2.clientY) / 2,\n  };\n}\n\nfunction parseFormula(formula) {\n  try {\n    let parsed = formula.replace(/\\^/g, \"**\");\n    return math.compile(parsed);\n  } catch (err) {\n    alert(\"Invalid formula: \" + err);\n    return null;\n  }\n}\n\nfunction hexToRgb(hex) {\n  hex = hex.replace(\"#\", \"\");\n  if (hex.length === 3) {\n    hex = hex.split(\"\").map(x => x + x).join(\"\");\n  }\n  const num = parseInt(hex, 16);\n  return [(num >> 16) & 255, (num >> 8) & 255, num & 255];\n}\n\nfunction getGradient(colors, steps) {\n  let grad = [];\n  for (let i = 0; i < steps; i++) {\n    let t = i / (steps - 1);\n    let idx = t * (colors.length - 1);\n    let i0 = Math.floor(idx);\n    let i1 = Math.min(i0 + 1, colors.length - 1);\n    let f = idx - i0;\n    let c0 = hexToRgb(colors[i0]);\n    let c1 = hexToRgb(colors[i1]);\n    grad.push([\n      Math.round(c0[0] + f * (c1[0] - c0[0])),\n      Math.round(c0[1] + f * (c1[1] - c0[1])),\n      Math.round(c0[2] + f * (c1[2] - c0[2]))\n    ]);\n  }\n  return grad;\n}\n\nasync function drawFractalToOffscreen() {\n  isLoading = true;\n\n  const formula = parseFormula(formulaInput.value);\n  if (!formula) {\n    isLoading = false;\n    return;\n  }\n\n  const cRe = parseFloat(cReInput.value);\n  const cIm = parseFloat(cImInput.value);\n  const maxIter = parseInt(iterationsInput.value);\n  const colors = gradientInput.value.split(\",\").map(s => s.trim());\n  const gradient = getGradient(colors, maxIter + 1);\n\n  const img = offCtx.createImageData(width, height);\n  const pixels = img.data;\n\n  // To keep UI responsive, break loop into chunks\n  const chunkSize = 50; // rows per chunk\n  for (let startY = 0; startY < height; startY += chunkSize) {\n    const endY = Math.min(startY + chunkSize, height);\n    for (let py = startY; py < endY; py++) {\n      for (let px = 0; px < width; px++) {\n        let x0 = centerX + (px - width / 2) * scale;\n        let y0 = centerY + (py - height / 2) * scale;\n        let zx = x0;\n        let zy = y0;\n\n        let iter = 0;\n        while (iter < maxIter) {\n          let scope = { z: math.complex(zx, zy), c: math.complex(cRe, cIm) };\n          let result = formula.evaluate(scope);\n          zx = result.re;\n          zy = result.im;\n\n          if (zx * zx + zy * zy > 4) break;\n          iter++;\n        }\n\n        let col = gradient[iter] || [0, 0, 0];\n        let idx = 4 * (py * width + px);\n        pixels[idx] = col[0];\n        pixels[idx + 1] = col[1];\n        pixels[idx + 2] = col[2];\n        pixels[idx + 3] = 255;\n      }\n    }\n    offCtx.putImageData(img, 0, 0);\n    await new Promise(r => setTimeout(r, 0)); // Yield to UI thread\n  }\n\n  isLoading = false;\n  dragOffset.x = 0;\n  dragOffset.y = 0;\n}\n\nfunction drawFromOffscreen(scaleFactor = 1, offsetX = 0, offsetY = 0) {\n  ctx.clearRect(0, 0, width, height);\n  ctx.save();\n  ctx.translate(offsetX, offsetY);\n  ctx.scale(scaleFactor, scaleFactor);\n  ctx.drawImage(offscreenCanvas, 0, 0);\n  ctx.restore();\n}\n\ncanvas.addEventListener(\"mousedown\", e => {\n  dragging = true;\n  dragStart.x = e.clientX;\n  dragStart.y = e.clientY;\n  lastCenter.x = centerX;\n  lastCenter.y = centerY;\n  // Keep current dragOffset if loading, else reset\n  if (!isLoading) {\n    dragOffset.x = 0;\n    dragOffset.y = 0;\n  }\n});\n\ncanvas.addEventListener(\"mousemove\", e => {\n  if (!dragging) return;\n  dragOffset.x = e.clientX - dragStart.x;\n  dragOffset.y = e.clientY - dragStart.y;\n  drawFromOffscreen(1, dragOffset.x, dragOffset.y);\n});\n\ncanvas.addEventListener(\"mouseup\", e => {\n  if (!dragging) return;\n  if (!isLoading) {\n    centerX = lastCenter.x - dragOffset.x * scale;\n    centerY = lastCenter.y - dragOffset.y * scale;\n    dragOffset.x = 0;\n    dragOffset.y = 0;\n    drawFractalToOffscreen();\n    drawFromOffscreen();\n  }\n  dragging = false;\n});\n\ncanvas.addEventListener(\"mouseleave\", () => {\n  if (!dragging) return;\n  if (!isLoading) {\n    centerX = lastCenter.x - dragOffset.x * scale;\n    centerY = lastCenter.y - dragOffset.y * scale;\n    dragOffset.x = 0;\n    dragOffset.y = 0;\n    drawFractalToOffscreen();\n    drawFromOffscreen();\n  }\n  dragging = false;\n});\n\nlet lastZoomFactor = 1;\nlet zoomTimeout = null;\n\ncanvas.addEventListener(\"wheel\", e => {\n  e.preventDefault();\n\n  const zoomFactor = e.deltaY < 0 ? 0.9 : 1.1;\n  scale /= zoomFactor;\n\n  lastZoomFactor *= zoomFactor;\n\n  drawFromOffscreen(lastZoomFactor);\n\n  if (zoomTimeout) clearTimeout(zoomTimeout);\n  zoomTimeout = setTimeout(() => {\n    lastZoomFactor = 1;\n    drawFractalToOffscreen();\n    drawFromOffscreen();\n  }, 300);\n});\n\n// Touch / pinch zoom handling\n\ncanvas.addEventListener(\"touchstart\", e => {\n  e.preventDefault();\n  if (e.touches.length === 1) {\n    dragging = true;\n    dragStart.x = e.touches[0].clientX;\n    dragStart.y = e.touches[0].clientY;\n    lastCenter.x = centerX;\n    lastCenter.y = centerY;\n    if (!isLoading) {\n      dragOffset.x = 0;\n      dragOffset.y = 0;\n    }\n    isPinching = false;\n  } else if (e.touches.length === 2) {\n    dragging = false;\n    isPinching = true;\n    pinchStartDist = getDistance(e.touches[0], e.touches[1]);\n    pinchStartScale = scale;\n    pinchStartCenter = getTouchCenter(e.touches[0], e.touches[1]);\n    pinchTempScale = 1;\n    pinchTempOffset = { x: 0, y: 0 };\n    pinchLastCenter = pinchStartCenter;\n  }\n});\n\ncanvas.addEventListener(\"touchmove\", e => {\n  e.preventDefault();\n  if (e.touches.length === 1 && dragging) {\n    dragOffset.x = e.touches[0].clientX - dragStart.x;\n    dragOffset.y = e.touches[0].clientY - dragStart.y;\n    drawFromOffscreen(1, dragOffset.x, dragOffset.y);\n  } else if (e.touches.length === 2 && isPinching) {\n    const newDist = getDistance(e.touches[0], e.touches[1]);\n    const newCenter = getTouchCenter(e.touches[0], e.touches[1]);\n    pinchTempScale = newDist / pinchStartDist;\n\n    pinchTempOffset.x += newCenter.x - pinchLastCenter.x;\n    pinchTempOffset.y += newCenter.y - pinchLastCenter.y;\n\n    pinchLastCenter = newCenter;\n\n    drawFromOffscreen(pinchTempScale, pinchTempOffset.x, pinchTempOffset.y);\n  }\n});\n\ncanvas.addEventListener(\"touchend\", e => {\n  e.preventDefault();\n  if (dragging) {\n    if (!isLoading) {\n      centerX = lastCenter.x - dragOffset.x * scale;\n      centerY = lastCenter.y - dragOffset.y * scale;\n      dragOffset.x = 0;\n      dragOffset.y = 0;\n      drawFractalToOffscreen();\n      drawFromOffscreen();\n    }\n    dragging = false;\n  }\n  if (isPinching && e.touches.length < 2) {\n    const pinchCenterCanvasX = pinchStartCenter.x - width / 2;\n    const pinchCenterCanvasY = pinchStartCenter.y - height / 2;\n\n    scale /= pinchTempScale;\n\n    centerX += pinchCenterCanvasX * (scale - scale * pinchTempScale);\n    centerY += pinchCenterCanvasY * (scale - scale * pinchTempScale);\n\n    pinchTempScale = 1;\n    pinchTempOffset = { x: 0, y: 0 };\n    isPinching = false;\n\n    drawFractalToOffscreen();\n    drawFromOffscreen();\n  }\n});\n\nresetBtn.addEventListener(\"click\", () => {\n  centerX = 0;\n  centerY = 0;\n  scale = 4 / width;\n  drawFractalToOffscreen();\n  drawFromOffscreen();\n});\n\nwindow.addEventListener(\"resize\", () => {\n  width = window.innerWidth;\n  height = window.innerHeight;\n  canvas.width = width;\n  canvas.height = height;\n  offscreenCanvas.width = width;\n  offscreenCanvas.height = height;\n  scale = 4 / width;\n  drawFractalToOffscreen();\n  drawFromOffscreen();\n});\n\nwindow.addEventListener(\"DOMContentLoaded\", () => {\n  drawFractalToOffscreen();\n  drawFromOffscreen();\n});\n\n"],"names":["canvas","ctx","formulaInput","cReInput","cImInput","iterationsInput","gradientInput","resetBtn","width","height","centerX","centerY","scale","dragging","dragStart","dragOffset","lastCenter","isLoading","offscreenCanvas","offCtx","isPinching","pinchStartDist","pinchStartCenter","pinchTempScale","pinchTempOffset","pinchLastCenter","getDistance","t1","t2","dx","dy","getTouchCenter","parseFormula","formula","parsed","err","hexToRgb","hex","x","num","getGradient","colors","steps","grad","i","idx","i0","i1","f","c0","c1","drawFractalToOffscreen","cRe","cIm","maxIter","s","gradient","img","pixels","chunkSize","startY","endY","py","px","x0","y0","zx","zy","iter","scope","result","col","r","drawFromOffscreen","scaleFactor","offsetX","offsetY","e","lastZoomFactor","zoomTimeout","zoomFactor","newDist","newCenter","pinchCenterCanvasX","pinchCenterCanvasY"],"mappings":"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"}