{"version":3,"file":"ipfs2.js","sources":["../../js/ipfs.js"],"sourcesContent":["// ipfs_uploader.js\n\n// Import the IPFS library\nimport { create } from 'https://cdn.jsdelivr.net/npm/ipfs-http-client@59.0.0/+esm';\n\n// Get references to the HTML elements\nconst dragArea = document.getElementById('dragArea');\nconst fileInput = document.getElementById('fileInput');\nconst uploadBtn = document.getElementById('uploadBtn');\nconst status = document.getElementById('status');\nconst cidSpan = document.getElementById('cid');\n\nlet uploadedFile = null;\n\n// Initialize the IPFS client with a public gateway\nconst ipfs = create({ url: 'https://ipfs.infura.io:5001/api/v0' });\n\n// --- Drag-and-Drop functionality ---\n// The click handler on the drag area is removed.\n// The file input will now be triggered by a <label> element in the HTML.\n\n// Visually indicate when a file is being dragged over the area\ndragArea.addEventListener('dragover', (event) => {\n  event.preventDefault();\n  dragArea.classList.add('active');\n});\n\n// Remove the visual indicator when the file leaves the area\ndragArea.addEventListener('dragleave', () => {\n  dragArea.classList.remove('active');\n});\n\n// Handle the file drop event\ndragArea.addEventListener('drop', (event) => {\n  event.preventDefault();\n  dragArea.classList.remove('active');\n  const files = event.dataTransfer.files;\n  if (files.length) {\n    fileInput.files = files; // Assign the dropped file to the file input\n    uploadedFile = files[0];\n    status.textContent = `${uploadedFile.name} selected.`;\n  }\n});\n\n// Handle file selection via the file input\nfileInput.addEventListener('change', () => {\n  uploadedFile = fileInput.files[0];\n  if (uploadedFile) {\n    status.textContent = `${uploadedFile.name} selected.`;\n  }\n});\n\n// --- Upload functionality ---\nuploadBtn.onclick = async () => {\n  if (!uploadedFile) {\n    status.textContent = 'Please select a file first.';\n    return;\n  }\n\n  // Disable the button to prevent multiple uploads\n  uploadBtn.disabled = true;\n  status.textContent = 'Uploading...';\n  cidSpan.textContent = '';\n\n  try {\n    // ipfs.add handles a single file and returns the CID directly\n    // The `wrapWithDirectory: true` option ensures it's added inside a folder, which is good practice.\n    const added = await ipfs.add(uploadedFile, { wrapWithDirectory: true });\n    \n    // added is an async iterable, so we need to get the last entry which is the root directory\n    let rootCID = '';\n    for await (const fileResult of added) {\n      rootCID = fileResult.cid.toString();\n    }\n\n    status.textContent = 'Upload complete!';\n    cidSpan.textContent = rootCID;\n  } catch (error) {\n    status.textContent = 'Upload failed: ' + error.message;\n  } finally {\n    // Re-enable the button after upload is complete or failed\n    uploadBtn.disabled = false;\n    uploadedFile = null; // Clear the file\n  }\n};\n\n"],"names":["dragArea","fileInput","uploadBtn","status","cidSpan","uploadedFile","ipfs","create","event","files","added","rootCID","fileResult","error"],"mappings":"mFAMA,MAAMA,EAAW,SAAS,eAAe,UAAU,EAC7CC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAY,SAAS,eAAe,WAAW,EAC/CC,EAAS,SAAS,eAAe,QAAQ,EACzCC,EAAU,SAAS,eAAe,KAAK,EAE7C,IAAIC,EAAe,KAGnB,MAAMC,EAAOC,EAAO,CAAE,IAAK,oCAAsC,CAAA,EAOjEP,EAAS,iBAAiB,WAAaQ,GAAU,CAC/CA,EAAM,eAAc,EACpBR,EAAS,UAAU,IAAI,QAAQ,CACjC,CAAC,EAGDA,EAAS,iBAAiB,YAAa,IAAM,CAC3CA,EAAS,UAAU,OAAO,QAAQ,CACpC,CAAC,EAGDA,EAAS,iBAAiB,OAASQ,GAAU,CAC3CA,EAAM,eAAc,EACpBR,EAAS,UAAU,OAAO,QAAQ,EAClC,MAAMS,EAAQD,EAAM,aAAa,MAC7BC,EAAM,SACRR,EAAU,MAAQQ,EAClBJ,EAAeI,EAAM,CAAC,EACtBN,EAAO,YAAc,GAAGE,EAAa,IAAI,aAE7C,CAAC,EAGDJ,EAAU,iBAAiB,SAAU,IAAM,CACzCI,EAAeJ,EAAU,MAAM,CAAC,EAC5BI,IACFF,EAAO,YAAc,GAAGE,EAAa,IAAI,aAE7C,CAAC,EAGDH,EAAU,QAAU,SAAY,CAC9B,GAAI,CAACG,EAAc,CACjBF,EAAO,YAAc,8BACrB,MACD,CAGDD,EAAU,SAAW,GACrBC,EAAO,YAAc,eACrBC,EAAQ,YAAc,GAEtB,GAAI,CAGF,MAAMM,EAAQ,MAAMJ,EAAK,IAAID,EAAc,CAAE,kBAAmB,EAAI,CAAE,EAGtE,IAAIM,EAAU,GACd,gBAAiBC,KAAcF,EAC7BC,EAAUC,EAAW,IAAI,WAG3BT,EAAO,YAAc,mBACrBC,EAAQ,YAAcO,CACvB,OAAQE,EAAO,CACdV,EAAO,YAAc,kBAAoBU,EAAM,OACnD,QAAY,CAERX,EAAU,SAAW,GACrBG,EAAe,IAChB,CACH"}